buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		maven { url = 'https://maven.parchmentmc.org' } //Parchment
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+' //Parchment
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle' //Parchment
apply plugin: 'eclipse'
//apply plugin: 'maven-publish'
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/ForgeUpdatesRemapper/main/remapper.gradle' //Magic mappings updater

version = "$mc_version-$mod_version"
group = "com.technomancer.crossroads"
archivesBaseName = "crossroads"

compileJava.options.encoding = 'UTF-8'
//Exclude python scripts from the build
sourceSets.main.java.exclude('**/python/**')

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: "$mcp_channel", version: "$mcp_version"

//	replaceIn 'mods.toml'
//	replace 'essentials_version', '$essentials_version'

	runs {
		client {
			workingDirectory project.file('run\\client')
			jvmArgs '-ea' //Enable assert keyword
			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Make patchouli work
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods {
				crossroads {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run\\server')
			jvmArgs '-ea' //Enable assert keyword
			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Make patchouli work
			properties 'mixin.env.disableRefMap': 'true'

			mods {
				crossroads {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	maven { url "https://maven.blamejared.com" } //Patchouli, JEI
//	maven {url "https://tehnut.info/maven"} //hwyla
	maven {url "https://maven.theillusivec4.top/"} //Curios
	maven {
		//Create, Flywheel, Registrate
		name = 'tterrag maven'
		url = 'https://maven.tterrag.com/'
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	} // Essentials (release versions)
	flatDir { dirs 'libs' }//Essentials (dev versions); lets us grab dependencies from the libs folder
}

dependencies {
	minecraft("net.minecraftforge:forge:$mc_version-$fg_version")

	assert essentials_dev_variant == 'false' || essentials_dev_variant == 'true'
	//Essentials
	//Can either depend on a file published to Curse or an essentials jar in a folder called "libs", in the same parent folder as "src"
	if(essentials_dev_variant == 'false'){
		//See https://www.cursemaven.com/ for explanation
		implementation(fg.deobf("curse.maven:essentials-293752:$essentials_file_id"))
	}else{
		//When setting up a dev environment for Crossroads, make sure to have an essentials jar in a folder called "libs", in the same parent folder as "src"
		implementation(fg.deobf("com.technomancer.essentials:essentials-$essentials_version:dev"))
	}

	//Compile against APIs
	//JEI
	compileOnly fg.deobf("mezz.jei:jei-$jei_mc_version-common-api:$jei_version")
	compileOnly fg.deobf("mezz.jei:jei-$jei_mc_version-forge-api:$jei_version")
	//Curios
	compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:$curios_version:api"))//Curios
	//Run with the full versions
	runtimeOnly fg.deobf("mezz.jei:jei-$jei_mc_version-forge:$jei_version")//JEI
	runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:$curios_version"))//Curios

	compileOnly(fg.deobf("vazkii.patchouli:Patchouli:$patchouli_version-FORGE:api"))
	runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:$patchouli_version-FORGE"))

	//No special CR integration for hwayla- only used for testing, so no compile inclusion needed
//	runtimeOnly(fg.deobf("mcp.mobius.waila:Hwyla:$hwyla_version"))

	compileOnly fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
	compileOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
	compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

//	TODO Create skipped MC1.19.4
//	runtimeOnly fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
//	runtimeOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
//	runtimeOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title": "crossroads",
				"Specification-Vendor": "Da_Technomancer",
				"Specification-Version": "1",
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor" :"Technomancer",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}

processResources {
	//Update properties in mods.toml based on gradle.properties values
	//Stole-borrowed this from Thermal Expansion. This is permitted by the CoFH "Don't be a jerk" mod license
	filesMatching('META-INF/mods.toml', {
		expand 'file': ['jarVersion': mod_version],
				'mc_version': mc_version,
				'forge_version': fg_version,
				'forge_major_version': fg_version.split('\\.')[0],
				'essentials_version': essentials_version
	})
}

//We don't use Maven
//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			artifact reobfArtifact
//		}
//	}
//	repositories {
//		maven {
//			url "file:///${project.projectDir}/mcmodsrepo"
//		}
//	}
//}
