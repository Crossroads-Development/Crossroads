buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
//apply plugin: 'maven-publish'

version = "$mc_version-$mod_version"
group = "com.technomancer.crossroads"
archivesBaseName = "crossroads"

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
//Exclude python scripts from the build
sourceSets.main.java.exclude('**/python/**')

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
	mappings channel: "$mcp_channel", version: "$mcp_version"

//	replaceIn 'mods.toml'
//	replace 'essentials_version', '$essentials_version'

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				crossroads {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				crossroads {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	maven { url "http://dvs1.progwml6.com/files/maven" } //JEI
	maven { url "https://maven.blamejared.com" } //Patchouli
	maven {url "http://tehnut.info/maven"} //hwyla
	maven {url "https://maven.theillusivec4.top/"} //Curios
	flatDir { dirs 'libs' }//Lets us grab dependencies from the libs folder
}

dependencies {
	minecraft("net.minecraftforge:forge:$mc_version-$fg_version")

	//Compile against APIs
	compileOnly(fg.deobf("mezz.jei:jei-$mc_version:$jei_version:api"))//JEI
	compileOnly(fg.deobf("top.theillusivec4.curios:curios:$curios_version:api"))//Curios
	//Run with the full versions
	runtimeOnly(fg.deobf("mezz.jei:jei-$mc_version:$jei_version"))//JEI
	runtimeOnly(fg.deobf("top.theillusivec4.curios:curios:$curios_version"))//Curios

	compile(fg.deobf("vazkii.patchouli:Patchouli:$patchouli_version"))

	//No special CR integration for hwayla- only used for testing, so no compile inclusion needed
//	runtimeOnly(fg.deobf("mcp.mobius.waila:Hwyla:$hwyla_version"))

	//When setting up a dev environment for Crossroads, make sure to have an essentials jar in a folder called "libs", in the same parent folder as "src"
	implementation(fg.deobf("com.technomancer.essentials:essentials-$mc_version-$essentials_version:dev"))
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title": "crossroads",
				"Specification-Vendor": "Da_Technomancer",
				"Specification-Version": "1",
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor" :"Da_Technomancer",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}

processResources {
	// This will ensure that this task is redone when the versions change.
	inputs.property 'version', project.version

	// Replace stuff in mods.toml and the patchouli book version, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		//Copy the Crossroads and essentials version into the toml file
		expand 'version':project.version
		expand 'essentials_version':"$essentials_version"

		exclude 'patchouli_books/manual/book.json'
		exclude 'META-INF/mods.toml'
	}

	// Copy everything else except the mods.toml
//	from(sourceSets.main.resources.srcDirs) {
//		exclude 'META-INF/mods.toml'
//	}
}

//We don't use Maven
//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			artifact reobfArtifact
//		}
//	}
//	repositories {
//		maven {
//			url "file:///${project.projectDir}/mcmodsrepo"
//		}
//	}
//}
