item.ingot_copper.name=Copper Ingot
item.ingot_tin.name=Tin Ingot
item.gem_ruby.name=Ruby
item.nugget_copper.name=Copper Nugget
item.nugget_tin.name=Tin Nugget
tile.block_copper.name=Block of Copper
tile.block_tin.name=Block of Tin
tile.block_ruby.name=Block of Ruby
tile.ore_copper.name=Copper Ore
tile.ore_tin.name=Tin Ore
tile.ore_ruby.name=Ruby Ore
tile.ore_native_copper.name=Native Copper Ore
item.nugget_bronze.name=Bronze Nugget
item.ingot_bronze.name=Bronze Ingot
tile.block_bronze.name=Block of Bronze
tile.sided_gear_holder.name=Small Gear Block
item.gear_copper.name=Copper Gear
item.gear_tin.name=Tin Gear
item.gear_bronze.name=Bronze Gear
item.gear_iron.name=Iron Gear
item.gear_gold.name=Gold Gear
item.hand_crank.name=Hand Crank
tile.master_axis.name=Master Axis
tile.grindstone.name=Grindstone
tile.heat_cable_copper_wool.name=Wool Insulated Heat Cable
tile.heat_cable_copper_dirt.name=Dirt "Insulated" Heat Cable
tile.heat_cable_copper_slime.name=Slime Insulated Heat Cable
tile.heat_cable_copper_ice.name=Ice Insulated Heat Cable
tile.heat_cable_copper_obsidian.name=Obsidian Insulated Heat Cable
itemGroup.crossroads=Crossroads
container.grindstone=Grindstone
item.dust_copper.name=Copper Dust
item.dust_salt.name=Salt
tile.fluid_tube.name=Fluid Tube
tile.steam_boiler.name=Steam Boiler
tile.heating_crucible.name=Heating Crucible
tile.rotary_pump.name=Rotary Pump
fluid.steam=Steam
fluid.distilledwater=Distilled Water
fluid.copper=Molten Copper
tile.blockMoltenCopper.name=Molten Copper Source
tile.blockDistilledWater.name=Distilled Water Source
tile.blockSteam.name=Steam Source
tile.blockLiquidFat.name=Liquid Fat Source
item.debug_heat_writer.name=Debug Heat Writer
item.debug_gear_writer.name=Debug Gear Writer
mysterious_journal=Mysterious Journal
tile.block_salt.name=Block of Salt
tile.steam_turbine.name=Steam Turbine
tile.brazier.name=Brazier
tile.fluid_void.name=Fluid Void
tile.axle.name=Axle
tile.heat_exchanger.name=Heat Exchanger
tile.insulated_heat_exchanger.name=Insulated Heat Exchanger
item.obsidian_cutting_kit.name=Obsidian Cutting Kit
item.mashed_potato.name=Mashed Potatoes
item.thermometer.name=Thermometer
item.fluid_gauge.name=Fluid Gauge
item.speedometer.name=Speed-O-Meter
item.omnimeter.name=OmniMeter
tile.fluid_tank.name=Fluid Tank
fluid.tile.water=Water
fluid.tile.lava=Lava
tile.coal_heater.name=Fuel Heater
tile.heating_chamber.name=Heating Chamber
container.heating_chamber=Heating Chamber
container.fuel_heater=Fuel Heater
tile.salt_reactor.name=Salt Reactor
tile.fluid_cooling_chamber.name=Fluid Cooling Chamber
container.slotted_chest=Slotted Chest
tile.slotted_chest.name=Slotted Chest
tile.sorting_hopper.name=Sorting Hopper
container.sorting_hopper=Sorting Hopper
item.vacuum.name=Vacuum Cleaner
item.magenta_bread.name=Magenta Bread
item.large_gear_copper.name=Large Copper Gear
item.large_gear_tin.name=Large Tin Gear
item.large_gear_bronze.name=Large Bronze Gear
item.large_gear_iron.name=Large Iron Gear
item.large_gear_gold.name=Large Gold Gear
item.chicken_boots.name=Chicken Boots
tile.candle_lilypad.name=Candle Lilypad
item.candle_lilypad.name=Candle Lilypad
tile.item_chute.name=Item Chute
tile.item_chute_port.name=Item Chute Port
tile.radiator.name=Radiator
tile.rotary_drill.name=Rotary Drill
item.edible_blob.name=Edible Blob
tile.fat_collector.name=Fat Collector
fluid.liquidfat=Liquid Fat
tile.fat_congealer.name=Fat Congealer
tile.redstone_heat_cable_copper_wool.name=Redstone Wool Insulated Heat Cable
tile.redstone_heat_cable_copper_dirt.name=Redstone Dirt "Insulated" Heat Cable
tile.redstone_heat_cable_copper_slime.name=Redstone Slime Insulated Heat Cable
tile.redstone_heat_cable_copper_ice.name=Redstone Ice Insulated Heat Cable
tile.redstone_heat_cable_copper_obsidian.name=Redstone Obsidian Insulated Heat Cable
tile.toggle_gear_bronze.name=Bronze Toggle Gear
tile.toggle_gear_copper.name=Copper Toggle Gear
tile.toggle_gear_tin.name=Tin Toggle Gear
tile.toggle_gear_gold.name=Gold Toggle Gear
tile.toggle_gear_iron.name=Iron Toggle Gear
death.attack.drill=%1$s has a great dentist!
death.attack.drill.player=%2$s forced %1$s to go to the dentist!
item.rain_idol.name=Rain Idol
tile.redstone_fluid_tube.name=Redstone Fluid Tube
tile.water_centrifuge.name=Water Centrifuge
tile.arcane_extractor.name=Arcane Extractor
item.pure_quartz.name=Pure Quartz
item.luminescent_quartz.name=Luminescent Quartz
item.lens_array.name=Crystal Lens Array
tile.small_quartz_stabilizer.name=Small Quartz Stabilizer
tile.large_quartz_stabilizer.name=Large Quartz Stabilizer
tile.crystalline_prism.name=Crystalline Prism
tile.arcane_reflector.name=Arcane Reflector
tile.lens_holder.name=Lens Holder
tile.block_pure_quartz.name=Block of Pure Quartz
tile.beam_splitter.name=Redstone Beam Splitter
tile.beam_splitter_basic.name=Basic Beam Splitter
item.invis_item.name=Invisible Item
tile.color_chart.name=Color Chart
tile.fertile_soil.wheat.name=Wheat Fertile Soil
tile.fertile_soil.carrot.name=Carrot Fertile Soil
tile.fertile_soil.potato.name=Potato Fertile Soil
tile.fertile_soil.beet.name=Beetroot Fertile Soil
tile.fertile_soil.oak.name=Oak Sapling Fertile Soil
tile.fertile_soil.birch.name=Birch Sapling Fertile Soil
tile.fertile_soil.spruce.name=Spruce Sapling Fertile Soil
tile.fertile_soil.jungle.name=Jungle Sapling Fertile Soil
tile.fertile_soil.acacia.name=Acacia Sapling Fertile Soil
tile.fertile_soil.dark.name=Dark Oak Sapling Fertile Soil
technician_manual=Technician's Manual
item.squid_helmet.name=Squid Helmet
item.pig_zombie_chestplate.name=Zombie Pigman Chestplate
item.cow_leggings.name=Cow Leggings
tile.multi_piston_sticky.name=Sticky Multi-Piston
tile.multi_piston.name=Multi-Piston
tile.multi_piston_extend_sticky.name=Sticky Multi-Piston Extension
tile.multi_piston_extend.name=Multi-Piston Extension
tile.master_axis_crystal.name=Crystalline Master Axis
item.chaos_rod.name=Rod of Discord
item.void_crystal.name=Void Crystal
tile.ratiator.name=Ratiator
tile.beacon_harness.name=Beacon Harness
itemGroup.heatCable=Crossroads Heat Cables
tile.fat_feeder.name=Fat Feeder
item.module_goggles.name=Modular Goggles
tile.toggle_gear_copshowium.name=Copshowium Toggle Gear
item.large_gear_copshowium.name=Large Copshowium Gear
item.gear_copshowium.name=Copshowium Gear
tile.chunk_unlocker.name=Chunk Unlocker
tile.rate_manipulator.name=Rate Manipulator
tile.flux_manipulator.name=Flux Manipulator
tile.flux_reader_axis.name=Flux-Regulated Master Axis
tile.multiplication_axis.name=Multiplication Axis
itemGroup.gear=Crossroads Gears
tile.addition_axis.name=Addition Axis
tile.equals_axis.name=Equals Axis
tile.greater_than_axis.name=Greater Than Axis
tile.less_than_axis.name=Less Than Axis
tile.redstone_axis.name=Redstone Axis
tile.square_root_axis.name=Square Root Axis
tile.mechanical_beam_splitter.name=Mechanical Beam Splitter
crossroads=Crossroads
controlEnergy.name=Item Energy Control
controlPotential.name=Item Potential Control
controlStability.name=Item Stability Control
controlVoid.name=Item Void Control
item.staff_technomancy.name=Beam Staff
tile.cage_charger.name=Cage Charger
death.attack.potentialvoid=%1$s has no potential.
death.attack.potentialvoid.player=%2$s stole %1$s's potential.
tile.hamster_wheel.name=Hamster Wheel
tile.fluid_splitter.name=Redstone Fluid Splitter
tile.basic_fluid_splitter.name=Basic Fluid Splitter
tile.copshowium_creation_chamber.name=Copshowium Creation Chamber
fluid.copshowium=Molten Copshowium
tile.block_copshowium.name=Block of Copshowium
item.ingot_copshowium.name=Copshowium Ingot
item.nugget_copshowium.name=Copshowium Nugget
tile.sin_axis.name=Sin Axis
tile.cos_axis.name=Cos Axis
tile.arcsin_axis.name=ArcSin Axis
tile.arccos_axis.name=ArcCos Axis
tile.gateway_frame.name=Gateway Frame
tile.redstone_keyboard.name=Redstone Keyboard
tile.detailed_crafter.name=Detailed Crafter
container.detailed_crafting=Detailed Crafting
tile.prototyping_table.name=Prototyping Table
tile.prototype_port.name=Prototype Port
tile.prototype.name=Prototype
item.beam_cage.name=Beam Cage
item.prototype_pistol.name=Prototyped Pistol
tile.molten_copshowium.name=Molten Copshowium Source
item.prototype_watch.name=Prototyped Watch
tile.mechanical_arm.name=Mechanical Arm
tile.redstone_registry.name=Redstone Registry
death.attack.chemical=%1$s died from a chemical spill.
death.attack.chemical.player=%2$s spilled chemicals on %1$s.
item.adamant.name=Adamant
item.sulfur.name=Sulfur
item.vanadium.name=Vanadium
item.vanadium_5_oxide.name=Vanadium (V) Oxide
item.phil_stone.name=Philosopher's Stone
item.prac_stone.name=Practitioner's Stone
item.alch_crystal.name=Alchemical Crystal
item.waste_salt.name=Alchemical Salt
tile.sifter.name=Sifter
item.wrench.name=Wrench
tile.alch_tube.name=Alchemical Tube
tile.alch_tube_glass.name=Glass Alchemical Tube
tile.alch_tube_cryst.name=Crystal Alchemical Tube
tile.fluid_injector_glass.name=Glass Fluid Injector
tile.fluid_injector_cryst.name=Crystal Fluid Injector
tile.flow_limiter_glass.name=Glass Flow Limiter
tile.flow_limiter_cryst.name=Crystal Flow Limiter
tile.heated_tube_glass.name=Glass Heated Tube
tile.heated_tube_cryst.name=Crystal Heated Tube
tile.cooling_coil_glass.name=Glass Cooling Coil
tile.cooling_coil_cryst.name=Crystal Cooling Coil
tile.chemical_vent.name=Chemical Vent
tile.port_extender.name=Port Extender
tile.reaction_chamber_glass.name=Glass Reaction Chamber
tile.reaction_chamber_cryst.name=Crystal Reaction Chamber
fluid.tin=Molten Tin
fluid.gold=Molten Gold
fluid.iron=Molten Iron
item.liech_wrench.name=Liechtensteinian Army Wrench
item.leyden_jar.name=Leyden Jar
tile.tesla_coil.name=Tesla Coil
tile.tesla_coil_top.name=Tesla Coil Top
tile.heat_limiter.name=Heat Limiter
tile.dynamo.name=Dynamo
tile.reagent_tank_glass.name=Glass Reagent Tank
tile.reagent_tank_cryst.name=Crystal Reagent Tank
tile.reagent_pump_glass.name=Glass Reagent Pump
tile.reagent_pump_cryst.name=Crystal Reagent Pump
tile.maxwell_demon.name=Maxwell's Demon
item.phial.name=Phial
item.phial_glass.name=Glass Phial
item.phial_cryst.name=Crystal Phial
tile.phial_holder.name=Phial Stand
item.florence_glass.name=Glass Florence Flask
item.florence_cryst.name=Crystal Florence Flask
item.shell_glass.name=Glass Shell
item.shell_cryst.name=Crystal Shell
item.nitroglycerin.name=Bottle of Nitroglycerin
tile.reds_alch_tube_glass.name=Glass Redstone Alchemical Tube
tile.reds_alch_tube_cryst.name=Crystal Redstone Alchemical Tube
tile.glassware_holder.name=Glassware Stand
tile.alembic.name=Alembic
item.solid_quicksilver.name=Frozen Quicksilver
item.custom_material.name=Crystallized Alchemical Clump
item.custom_tool_sword.name=Alchemical Sword
item.custom_tool_pickaxe.name=Alchemical Pickaxe
item.custom_tool_shovel.name=Alchemical Shovel
item.custom_tool_axe.name=Alchemical Axe

#GuideAPI documentation
#Useful characters for the lazy: §, °, ω, π, θ, √, ², Δ

#Mysterious Journal

#The Basics
lore.first_read=§r§rThere are TWO versions of this guide book. They both contain the same information, and either one should be sufficient. The two versions are the Mysterious Journal and the Technician's Manual. The Mysterious Journal contains lore, and multiple characters. The Technician's Manual is lore free, and only contains information. The two versions can be crafted into one another in the crafting grid. The Technician's Manual is recommended for people who simply want information, the Mysterious Journal is a more interesting (and often humorous) read that still provides information. It should be noted that there is some key information NOT MENTIONED in the Technician's Manual. Specifically, there are several secret features that are hinted at in the Mysterious Journal through one of the characters in the book. There is NO MENTION of these features in the Technician's Manual. The Technician's Manual will often give real life scientific context to concepts used in Crossroads (and note where Crossroads diverges from real life).
lore.intro.start=§r§oAre you sure this thing is working? §r§rYes I'm sure, I just turned it on and everything we're saying now is being recorded. §r§nThen stop talking you idiots and do the introduction! §r§rFine, then be quiet! Hello reader, I'm sure you are wondering what this book you have just found is. Let me explain. We are the three writers of this journal. §r§nWell obviously. §r§rBe Quiet. Anyway, at the time you are reading this we will be long gone. We each know the secrets of a different craft, and we are working together to record our knowledge for those in the future who would be capable of continuing our crafts. This journal will teach you the basics of magic and science so that you can make your decision as to which path to go down. I have worked with the other two writers to create a contraption that records what we say in this room into this journal, and will give a copy of this journal to capable people of the future, by making minor changes to reality. If you should ever need another copy of this book, just follow this recipe:
lore.intro.end=§r§rI know the secrets of Technomancy, manipulation of Time. Everything we say will be recorded in a different text style depending on the person. It was going to be different colors, but The Alchemist was worried the reader would be color blind. §r§oWait, what if the reader can't differentiate different fonts? §r§nThat's called being blind. §r§rJust introduce yourself. §r§oFine, I am an Alchemist. Alchemy is the manipulation of reality. §r§nThat leaves me. I am a Witch. Witchcraft is the manipulation of void. Do not confuse true witchcraft with the silly villagers in pointy hats, they do no true witchcraft. §r§rWe won't tell you our names, for... various reasons. Basically, the three of us will teach you a bunch of mundane science and magic, and then we will have you choose: Witchcraft, Alchemy, or Technomancy. At that point this book will gain a section specifically about that art. You can only pick one, and you should wait to learn more from us before you make the decision. §r§nThat should wrap up this section then, so I just flip this switch to stop the machine, right? §r§rYep. §r§lhEloe mE es bObo! Me is no-er of the derp! Will teahc U durp like me! firSt lehson es pootato U muhst get dem 4 stuf! mE wil t3ach U resipees 2 maek tings! mE saye hOw 2 uSe recipees in bRazzeer bit! Beye now! §r§rWe just came back from lunch to find some idiot somehow got in and filled up the introduction with badly spelled nonsense, with horrible grammar. Anyway, DO NOT TRUST anything this 'Bobo' person says, they seem like an idiot. Due to the nature of the machine, we can't remove this idiot's contribution. §r§nWhat do you mean, "can't remove"? Of course we can. See, there. §r§rYou just crossed it out on this copy, that doesn't remove it from all copies. §r§nWhat do you mean, all copies? I'm fairly certain this machine only wrote in this book. I don't see any other books, do you? §r§rThe machine doesn't send people this copy, don't be ridiculous. I mean, what if multiple people needed a copy at the same time? What then, if there was only one copy? §r§oTh-they could s-share the copy. §r§rDon't be ridiculous. Say one person got the book first, what incentive would they have to 'share' it with someone else? It would be against their own best interest to have to share. §r§oPossibly b-because it is the right th-thing to do? §r§rI can't see it, myself. §r§nSee, this is why no one likes you. §r§oI- I- I think th-that was a little rude. S-sharing aside, th-there has to be multiple copies because otherwise, what if someone, say, spilled acid on the book? §r§rWho would be foolish enough to spill acid? §r§oW-w-well, uh- §r§nI had been wondering where all those holes in the Alchemist's shirt came from. §r§rWhat does tattered clothing have to do with acid spills? §r§nI'll explain it later. §r§rShouldn't you know the machine makes copies already though? I mean, you helped build the thing, and you're telling me you didn't even know how it was supposed to work? I provided you both with detailed design plans. §r§nI sort of skimmed it a bit, just through the boring bits, like everything that wasn't my bit. §r§rDesign documents aside, reader: just ignore it if he writes in any more stuff. §r§nHow do you know it's a he? §r§rI don't, people just automatically use he. §r§nFair enough.
lore.ores.start=§r§rBefore you can start making machines to progress, you'll need some ores you might not be used to using. There are 4 ores of interest. §r§nNot counting the normal stuff, like gold and redstone. §r§oHow is redstone normal? What even is redstone? §r§nDon't know, don't care. §r§rAnyway, the things to look out for are tin, copper, native copper, and rubies. Native Copper is very common, but is only found between y=50 & y=70. When broken, it gives 3 copper nuggets.
lore.ores.copper=§r§rNormal Copper ore is also very common, and is only found below y=30. However, you'll need infrastructure to make it into ingots.
lore.ores.tin=§r§rTin ore is about as rare as gold, and is only found below y=30. It can be smelted into a tin ingot. Mine any that you find.
lore.ores.ruby=§r§rRuby ore is very rare, and is only found mixed in with quartz ore in the nether. It's only useful if you go into magic.
lore.ores.bronze=§r§rCopper and tin can be made into blocks and nuggets with the normal recipe, and rubies can be made into blocks when crafted in a 2x2. Also, copper and tin can be combined to make bronze, a useful alloy.
lore.ores.salt=§r§oDon't forget about salt! It isn't found naturally, but it is created later on. It can be turned into blocks that fall like sand. The Salt Block kills plants nearby, turning grass into coarse dirt and plants into dead bushes. §r§nCreepers are a type of plant by the way. Salt also shrivels up slimes into slimeballs.
lore.energy=§r§rBefore you can start using technology, you need to understand the power system. There are three main ways to transmit energy: Heat, Rotary, and Steam. Energy can be converted between the three forms in certain machines. Heat can be turned to steam with a Boiler, and steam can be turned back to heat with a Radiator, or converted to rotary with a Turbine. As you can see, once energy is converted to rotary form, you cannot change it back to heat. How exactly the energy is converted will be covered in later entries. A quick overview of each form of energy is that heat is simple, lossy, slow, and expensive to transfer, and is the main form of energy that you will generate. Steam is cheap, simple, lossless, and quick to transfer (making it ideal for transferring energy), and rotary is expensive, very fast, and complicated to transfer, and depending on how well you design your system could be very lossy or nearly lossless. Rotary is also the main type of energy you will be using for machines.
lore.heat.name=Basics of Heat
lore.heat.start=§r§rThe most basic form of energy is heat. Heat is transmitted with heat cables. Heat cables average their temperature with that of things around them. There are several types of insulator that can be used for heat cables. 
lore.heat.insulator=The insulator determines 3 things: the rate of heat loss, the melting temperature of the cable, and what the cable does when it melts. A loss of 0.2 means the cable temperature changes by 0.2°C towards the ambient temperature each tick. The insulators are Wool, which burns at 300°C, and has a loss of .25, Slime, which turns into a living slime at 500°C, and has a loss of .2, Ice which melts at 0°C, and is at -10°C when first placed, but has the smallest loss of .001. Finally, there is Obsidian, which melts at 2000°C, and has a loss of .015. 
lore.heat.insulator_effect_disable=The insulator determines 2 things: the rate of heat loss & melting temperature of the cable. A loss of 0.2 means the cable temperature changes by 0.2°C towards the ambient temperature each tick. The insulators are Wool, which overheats at 300°C, and has a loss of .25, Slime, which overheats at 500°C, and has a loss of .2, Ice overheats at 0°C, and is at -10°C when first placed, but has the smallest loss off .001. Finally, there is Obsidian, which overheats at 2000°C, and has a loss of .015. When a cable overheats it turns to fire. 
lore.heat.end=§r§rIt should be noted that ice cables are made with packed ice instead of normal ice. Right clicking any heat cable with an iron ingot, a piece of nether quartz, or a diamond will change the texture of the cable. This change is purely visual and does not consume the item. Right clicking it with a copper ingot changes the texture back. A Thermometer measures the temperature of what you right click on. The cables are made in the same pattern as the following example:
lore.heat.post_recipe=§r§rMost machines which use heat will do so at a constant rate as long as they are above a certain temperature, whether they are doing work or not. Most devices which produce heat have constant heat production while running. There are many approaches to regulating temperature so as to not melt heat cable, but a simple early game approach is to design systems that would produce more heat than is being consumed were none of the machines hot enough to use heat, but producing less heat than would be consumed with the machines drawing heat. This would cause the temperature to rise until the system is hot enough for machines to run, at which point it will stay around the correct temperature, but this has some drawbacks that can be corrected with more advanced, later game, systems. 
lore.heat.bobo=§r§lHELLLOO it's-a-me, bobo! me kNow trik 4 heat! dirt Is much g0od as ins-ool-8-or! hEat relEse power of d1rt! heAt 1et dErP frE!
lore.steam.start=§r§nSteam is best explained by covering fluids in general. Most machines that need fluid can't have it bucketed in directly, and need you to pipe it in. Fluids obviously flow through pipes, made like so:
lore.steam.tubes=§r§nThese tubes can handle any fluid, hot or cold, and average out the pressure between themselves and stuff around them. Pressure is the amount of liquid divided by the capacity. Most machines can only accept or output fluids though, so pipes don't average with those, they just insert/extract. There are also tanks, which store 20,000mB, which can be bucketed in and out of them directly. They average their pressure with tubes, and keep their contents when broken. They can be emptied in the crafting grid. They're made like so:
lore.steam.steam=§r§r What is the gold for? Surely bronze is enough? You also left out that comparators can detect how full a tank is. §r§nI thought I was supposed to be doing the bit on steam. And the gold is for reinforcement. §r§rGold? Reinforcement? You do know gold is softer than bronze, right? §r§nBe Quiet! You're breaking the fourth wall! §r§rMy bad, I'll just leave and let you get back to spreading misinformation then. §r§nGood riddance. Anyway, steam is just another fluid, and it's only special because it's great for moving energy. Heat can be converted to steam with boilers (more on that later), and steam can be converted back to heat or rotary energy. Also, it flows pretty quickly with no loss, and the tubes don't melt or anything like that. A boiler is made like so:
lore.steam.boiler=§r§nA boiler is a bit more complicated than it sounds. Heat goes in the bottom, steam comes out the top, and water goes in the side. The boiler turns water into steam once it hits 110°C. One bucket of steam uses %1$f°C to create with 1 bucket of water, and 10 pieces of salt are created. Salt can be pulled out the bottom, and if the boiler gets full of salt it stops working. Because salt needs to be hoppered out the bottom and heat goes in the bottom, you can't automate the boiler YET, if you care about that sort of thing for some reason. When you use steam to make rotary energy or heat, you get distilled water back instead of normal water. Distilled water can also be used to make steam, and if you use distilled water no salt is created, making the boiler automatable. Also, the boiler only has to be heated to 100°C, and only uses %2$f°C per bucket, which is how much heat you can get out of a bucket of steam. Distilled water is just better for making steam for some reason. I don't really know why it takes less heat to boil, maybe the Alchemist could tell you. One last thing in this long ramble, to measure the fluid pressure in something make a fluid gauge, made like so:
lore.rotary.name=Basics of Rotary
lore.rotary=§r§rThe most complicated energy system is rotary. Rotary energy is carried by gears and axles. There are small gears, with a radius of .5 blocks, and large gears, with a radius of 1.5 blocks (they are 3x3). 6 small gears can fit in one blockspace, one on each side. Small gears require something solid to attach to. They can connect around corners and to adjacent gears. They can connect axially to what they are attached to. Large gears do not need a solid support, and only 1 can fit into a blockspace. They connect in the same way small gears do. Axles connect two things together axially, for example connecting a small gear on one end to a large gear, a machine, or another axle on the other end. Every system of rotary power needs 1 Master Axis. Additional Master Axes have no effect. There are special Master Axis variants later on. Most (but not all) rotary machines have an inner gear that must be connected to axially. Before I get into specifics, I should explain the physics. Because they are so complicated, I will explain the physics twice: first in a complete way that includes the calculations, and then again in a dumbed down way for people who hate math. Knowing the actual calculations can help optimize rotary systems greatly though. Just skip ahead through this part if you hate math. Gear physics should first be explained with a single gear. Imagine there is 1 gear floating in space, with no friction, AKA no loss. The gear has a mass, and a moment of inertia. A moment of inertia (I) is like mass, but also takes into account the shape and size of the gear. I = r²m/2. Or in plain english, I equals the radius squared times mass divided by 2. The speed the gear is spinning (in radians per second) is represented by a lowercase omega, ω. §r§nThere's no such thing as a lowercase omega. You just wrote a normal W. §r§rYes there is, and they look almost the same. Now leave. Anyway, a radian is a measure of angles, like degrees, and has the symbol θ. There are 2π radians in a circle. The energy in a gear is equal to Iω²/2, or I times speed squared all divided by two. Power is the change in energy every second. The energy of a gear, E, is E=Iω²/2. Each tick, all the energy in a network is redistributed. The rule is as follows: each gear in a network has a "Rotation Ratio", R. Define the gear on the Master Axis as having an R of 1. For each gear, find how many times it would rotate if the starting gear turned once. This is the gear's Rotation Ratio. For each gear, find IR². Sum the IR² values. Each gear will have E=sum(E)IR²/sum(IR²) each time energy is redistributed. If you create a network where a gear would have 2 (or more) different R values at once (be it by a direction conflict or some bad design with axles) nothing can spin and all energy is instantly lost. There is also energy loss over time for all gear networks. Each tick, every gear loses a certain %% of its energy. The percentage lost increases with speed. (Energy lost)=E[1-1.001^-ω].  Now for the dumbed down version of gears: Gears are spinny things that spin and more energy means faster spinning, but heavier gears means slower spinning. Heavier gears don't mean less energy though, just less spinning. Faster spinning means faster machines. More spinning means more energy loss. Heavy gears have less loss. §r§oJust because you are dumbing something down doesn't mean you have to dumb it that far down. That could really be quite offensive. §r§rYou said I had to explain it in a simple way for people who dislike pages of equations. I did. §r§oN-next t-time could you maybe... never mind. Now for how to make the gears themselves. There are several gear materials, and in order of most to least dense they are: Gold, Copper, Bronze, Iron, & Tin, with gold being more than twice as dense as copper. One last thing, the Hand Crank allows you to manually add energy to gears by cranking them. Right click to spin them one way, shift right click to crank them the other way. Holding down the button is best. It is manual and only creates a small amount of power, so I recommend switching to automated power generation as soon as possible. Also, final note, §r§nYou just said the crank was the final note. §r§rI just remembered that I hadn't mentioned that a Speedometer can measure the speed and energy of a gear. One last tric- §r§nHah! §r§rAre you never quiet? As I was saying, if you combine the Thermometer, the Speedometer, and the Fluid Gauge, you can create an Omnimeter which combines all of their functions into one device, which can also give additional information. 
lore.copper=§r§rIn order that the instructions on processing copper properly are not spread thinly throughout various entries, in this entry I will explain the basics of copper processing. I will also include an example setup, which while certainly not the best, will work. Native copper ore is found commonly near the surface, and drops 3 copper nuggets when mined. Normal copper ore is also very common, and is only found deeper down. Because you will need a lot of copper, it is imperative that you learn to process normal copper ore. It cannot be smelted in a normal furnace. First it must be ground in a Grindstone into 2 copper dust. Then the dust must be melted down in a Heating Crucible into molten copper. Finally, molten copper must be run through a Fluid Cooling Chamber to cool it into ingots. When all's said and done, one copper ore will be enough for two copper ingots. An example setup would be to have a boiler heated by an insulated heat exchanger (placed directly below it). The boiler produces steam, which powers a turbine making rotary. The turbine creates steam and distilled water, with the distilled water going back to the boiler and the excess steam being fed back into the turbine. The heat exchanger is heated via flowing lava underneath, which turns to cobblestone when heat is produced. The cobblestone is broken by a drill powered by the turbine, making room for more lava to flow. The turbine also powers a grindstone producing copper dust and sand, and sorting hoppers are used to separate out the sand. The copper dust goes into a heating crucible, which melts it down into molten copper. The crucible is heated by the insulated heat exchanger mentioned earlier through obsidian insulated heat cables, but so that the cables don't overheat, they also go past the crucible into a normal heat exchanger to dump heat. The molten copper goes into a fluid cooling chamber, where it is turned into ingots. The fluid cooling chamber dumps heat through a cable into a normal heat exchanger. Included is a picture of such a setup.
lore.intro_path=Introduction to Paths
lore.intro_path.start=§r§rBefore you read this section, you should have advanced well into magic. There are 3 directions you can go: Technomancy, Alchemy, and Witchcraft. (Alchemy and Witchcraft are NYI, so only 1 way you can go currently). In order to go down a path, you need to unlock it. This will unlock a new section to the journal with only 1 of us narrating, and the recipes for the new items. 
lore.intro_path.locked=However, you can only go down one path, so choose carefully. §r§nWhy can't they do multiple. I don't see why they can't d- §r§rLook, it's in the config, alright? §r§nWhat does that even mean? §r§rJust. Don't. Ask. §r§nFine, fine, get on with it. §r§r
lore.intro_path.continue=We're each going to give an explanation about what our path is about. I'll go first. §r§nI want to go fir- §r§rI'm going first. Anyway, alphabetically speaking Technomancy comes before Witchcraft. §r§nThen the Alchemist should go first. §r§oP-please l-leave me out of thi- I-I'm happy to go l-last. §r§nFine, go first, see if I care. §r§rTechnomancy is the hardest path §r§nSays you. §r§rShush. If you are not able to come up with convoluted designs, you will not be able to succeed. The simplest task in Technomancy is more complicated than some of the most complicated you have faced so far. However, it provides the tools and devices to make automation a lot easier, and will allow you to greatly improve previous setups. It is also the most powerful §r§nLiar! §r§oN-no need t-to call names. B-besides, there is n-no most powerful path, each one has its strengths an-and its weaknesses. I-I c-can't s-slow down time, but the T-Technomancer couldn't do the simplest t-transmutation. §r§rPoint taken. As I was saying, Technomancy is based around the manipulation of time. With Technomancy, time can be sped up, slowed down, or even stopped temporarily. §r§oI-if t-time is s-stopped, how could t-there be a temporarily? §r§rLook, it's relative to the flow of universal time, there's multiple temporal levels, the math works out. §r§nNah, I'm not buying it. You're just making it up as you go along at this point. §r§rDo you have 12 PhDs? §r§nNo, but- §r§rI didn't think so. §r§nBut neither do you! You don't have any PhZs! §r§rPhDs, not PhZs. Look, they don't offer PhDs in Technomancy. §r§nMaybe because you made the word up? §r§rAS I WAS SAYING, by manipulating time, often in non-obvious ways, several so called laws of physics can be bent, or ignored. §r§nAre you done? §r§rYes, I'm done. §r§n My turn then. Witchcraft (NYI) will be themed around the manipulation of void. §r§oI g-guess I go now, t-then? Alchemy (NYI) will be themed around the manipulation of reality. It will be balanced around experimentation, as many aspects of Alchemy will be randomised based on world seed, and the player will have to discover and test things on their own. Alchemy will allow the changing of the world in huge areas at a time, and the creation of custom materials.  §r§rIn order to unlock a path and then craft the relevant items, you need to make a Detailed Crafter. It functions like a normal crafting table, except that it can unlock the paths and craft items from them. To unlock Technomancy, discover the TIME element. Then place a bronze gear in each of the 9 slots of any Detailed Crafter (consuming the gears). There is a cheaper recipe for the Detailed Crafter once any path has been unlocked. 

#Heat Machines
lore.fuel_heater=Fuel Heater
lore.fuel_heater.text=§r§nThere are a few ways to make heat, but the easiest is to use a Fuel Heater. §r§rI wouldn't call it easiest, cheapest early on maybe, but its not exactly as easily automatable as a Heat Exchanger. §r§oI p-prefer other methods p-personally. §r§nYou two and your automation. Not everything has to be automated. §r§rBut at least some things should be. Your idea of enough automation is using the torch trick to collect sand faster. §r§nLook, everything has a place, unless that something is automation. Doing things the hard way is more proper. §r§rBut the hard way is, by definition, harder. §r§nAnd worth it. Now let me talk. It burns any furnace fuel with the same duration as a furnace would, producing 1°C/t while doing so. There is a heat connection on the top which can transport heat to something directly above it without a cable, or a heat cable can be connected to the top. §r§oAs you can see by the copper patch on the top. §r§lIT'S-A-ME, BOBO! 1f U get 2 hot, it hurt! BOBO no want hurt! BOBO stop hurt! u$e dis to make thing to stop hurt! pouder Fire, rAw BACON, flat brown haird cloth! f1x wid pot8o pOisin!
lore.heating_chamber=Heating Chamber
lore.heating_chamber.text=§r§rThe Heating Chamber is the most obvious and simplest application for heat. It basically acts as a heat powered furnace, which is faster than a regular furnace. While above 200°C it consumes -2°C/t, and while work towards cooking an item. It takes 50 ticks of being above 200°C (which do not need to be consecutive) to cook one item. Now obviously it is difficult to compare the efficiency of the heating chamber with that of the furnace due to the numerous ways to generate heat, but assuming no loss and that the Heating Chamber is already pre-heated, 1 coal in a Fuel Heater will produce enough heat to cook 16 items, as opposed to 8 in a furnace. 
lore.heat_exchanger=Heat Exchanger
lore.heat_exchanger.text=§r§rThe Heat Exchanger serves 2 purposes: to act as a heat sync and to provide a way of generating heat (or decreasing temperature below ambient). The Heat Exchanger has a heat loss of 10°C/t. Also, a Heat Exchanger can perform certain "recipes" with blocks directly below it, with some conversions producing heat while the Heat Exchanger is below a certain temperature, and others consuming heat while the Heat Exchanger is above a certain temperature. The purpose of these "recipes" isn't the blocks created, but the temperature change. The temperature change is not immediate, but is applied over time at 25°C/t until the full temperature change has been applied. This means that a Heat Exchanged, kept supplied with certain blocks directly below it, is a constant 25°C/t source or cooler. The conversions are lava -> cobblestone producing 1000°C when below 3000°C (the lava does not need to be a source block); fire -> air producing 300°C when below 2000°C; magma block -> netherrack producing 500°C when below 2000°C; snow block -> water cooling by 50°C when above -20°C; ice -> water cooling by 70°C when above -50°C; packed ice -> water cooling by 140°C when above -100°C. An Insulated Heat Exchanger is a variant of Heat Exchanger that does not lose heat to its surroundings. §r§nWhat's the point of a Heat Exchanger that doesn't exchange heat? §r§rThe point is that it can still move heat with blocks below them. Therefore, if you wanted to use it for heat generation it is more efficient. 
lore.heating_crucible=Heating Crucible
lore.heating_crucible.text=§r§rA Heating Crucible can do two things. It can either heat cobblestone into lava or ground copper into molten copper when heated above 1000°C. Insert items through a hopper or other automated method into the top. Pipe the fluid out the sides. Heat it through the bottom. It consumes a constant 10°C/t while above 1000°C whether running or not. While it can run at any temperature above 1000°C, it is 5 times as fast at 1500°C and above. Every operation creates 200mB of lava or 144mB of molten copper.
lore.fluid_cooling=Fluid Cooling Chamber
lore.fluid_cooling.text=§r§nThe Fluid Cooling Chamber is a machine with an annoyingly long name. §r§oIt is quite important though. §r§nMaybe. It's the counterpart to the Heating Crucible. It can cool liquids to produce items. Extract items out the bottom, put fluid in the side, and connect heat cables to the top. When the Fluid Cooling Chamber cools a liquid it creates heat, and if the machine gets above a certain temperature it stops working. It can turn a bucket of lava into obsidian when below 1000°C, adding 500°C per craft, it can turn 144mB bucket of molten copper into a copper ingot when below 1000°C, adding 100°C per craft, it can turn water into ice when below -10°C, adding 1°C per craft, and it can turn distilled water into packed ice when below -20°C, adding 2°C per craft. 
lore.redstone_cable=Redstone Heat Cable
lore.redstone_cable.text=§r§rRedstone Heat Cables allow redstone interaction with heat. They are made by surrounding any heat cable with 8 redstone in the crafting grid. A Redstone Heat Cable functions like a normal heat cable, except it only connects to other heat cables or machines while it has a redstone signal. A comparator can also be used with a Redstone Heat Cable to measure the temperature. The equation for converting °C to redstone strength is as follows: redstone = 15 * (273 + °C) / (273 + insulator melting point). This equation rounds down. Therefore, this will never reach 15 because at that point the cable melts. 
lore.salt_reactor=Salt Reactor
lore.salt_reactor.text=§r§rIf you need to cool a machine below the ambient biome temperature, such as to create packed ice in a Fluid Cooling Chamber, §r§nI still say it's a stupidly long name. §r§rAnd I don't care. As I Was Saying, should you need to cool something below ambient temperatures, I would recommend a Salt Reactor. With a piece of salt and 200mB of distilled water, the Salt Reactor decreases its temperature by 5°C and creates 200mB of normal water. It can cool by up to 5°C/t. Distilled water is inserted in the top, water comes out of side, and salt can be inserted any side. §r§nThat's it? §r§rWhat do you mean that's it? §r§nWhen you said we needed to do the bit on something called a Salt Reactor, I was expecting something involving radiation that would glow green. Also, 5°C isn't very much. §r§rYou do know that the whole concept of radiation glowing green is a misconception, right? And if you use well insulated heat cables, such as ice, 5°C is quite a bit. §r§nReally though? Salt to cold. Pretty boring. How does that even work, anyway? §r§oI can answer that. Dissolving certain types of salt in water is endothermic. It uses distilled water to be able to dissolve more. 

#Rotary Machines
lore.grindstone.pre_recipe=§r§rThe Grindstone is the first rotary powered machine you should create. Make one like so:
lore.grindstone.post_recipe=§r§rThe Grindstone has an internal gear with I=1. It uses all energy from the internal gear each tick while running, so it runs faster at higher speeds (more energy in the gear each tick). Gears can be connected to it from the top. It uses 100 energy total to grind up an item. Items can be inserted into any side other than the bottom. Early on, a Hand Crank is sufficient to run a Grindstone, albeit slowly. The recipes that the Grindstone can do are as follows: Copper Ore -> 2 Copper Dust + 1 Sand, Gravel -> 1 Flint, Bone -> 5 Bone Meal, Coal Block -> 1 Gunpowder, Nether Wart Block -> 9 Netherwart, Wheat -> 3 Seeds, Pumpkin -> 8 Pumpkin Seeds, Melon (slice) -> 3 Melon Seeds, Redstone Block -> 9 Redstone Dust, Cobblestone -> 1 Sand, Stone -> 1 Gravel. Note that the only ore that the Grindstone works on is copper. §r§lhOI mE i$ BOBO! musHi mAsh1 p0Tato!
lore.item_chute.pre_recipe=§r§rItem Chutes simplify transferring items vertically at the cost of rotary power. There are two parts to a chute: the Item Chute itself and the Item Ports. They are made like so:
lore.item_chute.post_recipe=§r§rTo use Item Chutes, place down a Chute Port where you want to insert items into the Chute automatically. Insert items into the large hole in the Item Chute Port. Put a column of normal Item Chutes from the bottom port up to one block below where you want to get the items out. Put a second Chute Port on top of the pillar of chutes. Items will be dropped out of the large hole in the top port. Provide the bottom port energy with a gear attached to the small axle hole in the side. Only the bottom port needs power. The Chute has an internal gear of I=8, and uses .5 energy per item transfered. If there is an inventory in the blockspace the top Item Chute Port points into, items will be inserted into the inventory instead, and will stop outputting items once it fills up. 
lore.drill.pre_recipe=§r§rA Rotary Drill is a block that, when placed down and provided with rotary power, will break blocks and damage mobs in front of it. Make two like so:
lore.drill.post_recipe=§r§rThe Rotary Drill has an internal gear with I=50. It draws .5 energy every tick, whether it is doing work or not. The drill doesn't use any extra power when doing work. For breaking blocks, it requires a speed of at least .1 times the hardness of the block. For example, cobblestone has a hardness of 3, so a speed of .3 is required. Obsidian on the other hand has a hardness of 50, so to break obsidian the drill has a minimum speed of 5. When damaging mobs, there is no minimum speed, but more speed means more damage. It deals (10 * speed) damage, so a speed of 5 deals 50 damage. It deals damage or breaks blocks every half-second. 
lore.toggle_gear.pre_recipe=§r§rBeing able to control gears with redstone can often be useful. The Toggle Gear allows you to connect and disconnect it from other gears with redstone. They are available for all gear materials, and are made like so:
lore.toggle_gear.post_recipe=§r§rThey will only connect while they have a redstone signal, so they can be used to split a gear system into two parts (though for both parts to function, both sides need a master axis) or to disconnect a machine. Due to the nature of the mechanism, only one can be fit into a blockspace, and it can only be placed on the ground, not walls or ceilings. It doesn't need to be on a solid block, however. A comparator can also be used to measure the energy of a Toggle Gear. The equation for signal strength is (signal = 15 * speed^2 / 2) rounded down, and limited at 15.

#Fluid Machines
lore.rotary_pump.pre_recipe=§r§oA way of collecting water into pipes is the rotary pump, made like so:
lore.rotary_pump.post_recipe=§r§oThe Rotary Pump has an internal gear with I=8. Using 200 energy from the internal gear, it will draw a fluid source below it into itself, and the fluid can be piped out the sides. It can only run if there is a least 1 unit of energy in the internal gear, and it is spinning clockwise. Due to it only draining from source blocks directly under it, it is only useful for water.
lore.steam_turbine.pre_recipe=§r§rA Steam Turbine is literally just a Rotary Pump with a few minor modifications. It can be converted to and from a Rotary Pump like so:
lore.steam_turbine.post_recipe=§r§rInstead of using rotary energy to pump fluids, a steam turbine creates rotary energy when steam moves through it. Steam is inserted into the Steam Turbine through the bottom, and is converted to distilled water and rotary energy. If the output tank fills up, the Steam Turbine stops working. The distilled water comes out the sides. Rotary energy is outputted to a gear on top of the turbine. One bucket of steam, fully processed into rotary energy, produces %1$f units of energy.
lore.radiator.name=Radiator
lore.radiator=§r§rWhile a Steam Turbine converts steam into rotary energy, a Radiator converts steam into heat. It is also far simpler to use than a Steam Turbine. Insert steam through the bottom and it will be fully converted to distilled water and heat. One bucket of steam produces %1$f°C of heat. Distilled water comes out the top and heat cables can be connected to the sides. A radiator is made like so:
lore.radiator.bobo_rain_idol=§r§lH0I ME IS BOBO! b0Bo teach U ra1n danCe noW! tO do dAnce U ned idol! mE givE U Idol but me lOSe IDOL! U maKe nEw idol like diS! mAgic bLue stuff, roUgh rok, and a taD 'Oh gold rush luCk! hoLd It and Do a BARRAL ROLL! or do rAin dancE to Make THing wOrk! iF U ned dancing les0ns, remembers: The KEY to dancing is STICKY! mAke rAin go aWay by dOing it BackWards! BOBO OUT!
lore.liquid_fat.pre_recipe=§r§rOften food is not as convenient as it could be. It might not have the exact hunger or saturation value you want, and having a farm for multiple crops be your food source means you have to carry around multiple types of food. Turning food into a liquid sol- §r§oI thought I said that I didn't want to have a bit about that. §r§rWhy, what's wrong with it? §r§nI never heard you say that. §r§oDid I not? Well I meant to. Because it is disgusting is why. Do this bit without me. §r§rBut you are the only one of us who knows how it works. I know how to use it, but not why it works. You literally invented it. §r§oAnd it was a disgusting invention. Goodbye. §r§nWhat exactly is this next device? §r§rLet me talk and you will find out. As I was saying, liquefying food fixes these problems. The first part is making food into liquid fat with a Fat Collector, made like so:
lore.liquid_fat.mid_recipe=§r§rWhen given heat from the bottom and food is inserted into the top, it produces liquid fat, which can be piped out the side. The conversion rate of food value (saturation + hunger) to liquid fat is one value = %1$fmb of liquid fat. However, the exact temperature of the Fat Collector matters. Below 100°C it does nothing, above 200°C it burns up all fat produced, between 140°C and 160°C is optimal, producing 1.2 times as much liquid fat from food as the normal conversion. From 100°C to 140°C and from 160°C to 200°C it is less efficient, producing .8 times as much fat from food as the normal conversion. §r§nWait, the purpose of all this is to make liquified fat? Does this get used as food? §r§rYes. §r§nDoesn't sound like it would taste good. §r§rIt really doesn't, but it's efficient. §r§nWhat disgusted the alchemist so much? §r§rPossibly the fact that you end up eating pure fat. As I was saying, the Fat Collector uses .8°C per value of the food it converts to liquid fat. Once you get some of this liquid fat, there is another machine that turns it into food that has controllable saturation and hunger. That machine is the Fat Congealer, which is made like so:
lore.liquid_fat.post_recipe=§r§rThis machine uses rotary energy from a gear on top of it, and uses liquid fat piped in the side. The exact speed and energy of the gear matters for this machine, as they control the hunger and saturation of the food created. The value of the food created will be equal to (gear energy / 10). The saturation of the food will be equal to the (value * speed / 2). The hunger restored is of course (value - saturation). The hunger and saturation of the food produced is capped at 20. The machine uses 1 energy per food produced. The food produced is dropped as an item from the bottom of the machine. You can use a hopper to catch it. §r§nExactly what type of food does it make? Some sort of meat or... §r§rEdible blobs of pure fat. §r§nMakes sense. §r§rThe Fat Congealer uses an amount of liquid fat based on the value of the food and the conversion ratio I mentioned earlier. An example of the math on the Fat Congealer is that a gear on top of it with an energy of 80 and a speed of 1 would produce food with a hunger and saturation value of 4, and would use 800mb of liquid fat. §r§lI IS BOBO, DERPER OF THINGS! mE lIke eAt mUch! eAt 2 much and get sick! nO want sick! Recipe To stoP sick! All 3 bIts of KOW! m3nd with grene tater!
lore.fat_feeder.pre_recipe=§r§rThe Fat Feeder uses liquid fat to feed players within a certain range. It is made like so:
lore.fat_feeder.post_recipe=§r§rIn order to operate, there needs to be a gear (or axle, of course) on both the top and bottom of the Fat Feeder. Both gears need a non-zero speed. The radius of the Fat Feeder's operation is equal to (top gear speed) / (bottom gear speed), rounded down. The direction of the two gears does not matter. The Fat Feeder consumes liquid fat (inserted via the sides) to refill the hunger and saturation of players within range. As with other machines, %1$fmB of fat equals 1 value. For every value that the Fat Feeder feeds to nearby players, 1 energy will be moved from the top gear to the bottom gear, always in the direction to decrease the top gear's speed and increase the bottom gear's speed. While there are many ways to automate this machine, one decent way is to use axles. Of course that is just a suggestion.
lore.redstone_tube=§r§rSomething that can be useful is the ability to control the flow of fluids with redstone. The Redstone Fluid Tube only allows fluid to flow through it when it has a redstone signal. One is made like so:
lore.fluid_splitter.name=Fluid Splitter
lore.fluid_splitter=§r§rThere are two variants of Fluid Splitter: The Basic Fluid Splitter and Redstone Fluid Splitter. Both accept fluid from the sides & output it to the top and bottom. The Basic Fluid Splitter will output 1/2 of the inserted fluids to the top and 1/2 to the bottom. The Redstone Fluid Splitter splits fluids based on a redstone signal. (Signal Strength)/15 of the fluid goes to the bottom, and the rest goes out the top. A rule of thumb to remember which way redstone redirects fluid is that if you were to place a lever on a Redstone Fluid Splitter, the fluid would exit in the direction the lever points. 
lore.water_centrifuge.pre_recipe=§r§rDistilled water and salt are often in short supply. Considering the fact that producing them with a Steam Boiler is not automatable, there is a need for a specialized machine. Thus, the Water Centrifuge. It is created like so:
lore.water_centrifuge.post_recipe=§r§rIt has 4 fluid ports, one on each side. The red ports output distilled water, and the orange ports accept water. Salt can be removed from the bottom. A gear needs to be on top of it. The centrifuge itself takes no energy to run, but that isn't to say that it doesn't have its requirements. The gear on top needs to reach .5 speed for the machine to produce one batch of salt and distilled water. For the next batch, the speed needs to be .5 in the opposite direction. Basically, the direction of the gear on top needs to keep reversing, and each time it needs to reach a speed of at least .5. §r§oHow big is a batch? §r§r100mB of water is consumed, 100mB of distilled water is produced, and one unit of salt is produced. §r§oThat doesn't sound like very much if the direction has to be reversed. §r§rProperly automated, it builds up rather quickly. §r§lhOI ME 1S B0BO! mE knower 0f tRick wItH WatER! h0RSe schin + ocie-Gen fish and black-i-fying stuf! frowny tater for fix'n it up!

#Miscellanous
lore.brazier.pre_recipe=§r§nA nice thing to have is a Brazier. They are easily made like this:
lore.brazier.post_recipe=§r§nA brazier can burn one of two things: charcoal and salt. Put either one in with a right click. §r§rAutomation also works. §r§nNoone cares about your lousy automation. §r§oI like automa- I'll just stay out of this. §r§nSo you put an item in and it burns for 5 minutes. When an item is burning, particles come out of the brazier and it emits light. §r§rLight level 15 to be exact. §r§nWhat sort of measuring system is that? 15 what, candles? §r§rNot 15 candles, just 15 units. §r§nThat makes no sense. Also, while burning salt there is an additional effect. None of the villager witches can spawn within 64 blocks of a brazier burning salt. §r§oAnd why is that exactly? §r§nBecause salt cleanses things, like false witches. §r§rIf 15 light units doesn't make any sense, then that makes even less sense. §r§nIt just works, OK. §r§lhOI mE 1s BOBO! Burny block do tricks for making stuffs! g0od stuffs! BOBO stuFfs! Burny burny poison potato for make mega strong stuffs! Toss 3 things onto burny block with potato bern for new bobo thing! mE tEach you craft now! maKe mega snack too energyful for most peoples, no can control selves. mAke with poison potatoe on burny block 3 bits are a loaf o' bred, some 'Murica dye, and some glowy dust from H-E-double 1! tHe poweR IT'S OVER 8074! BOBO OUT!
lore.item_sorting.pre_recipe=§r§rThis section will cover two devices: the Sorting Hopper and the Slotted Chest. On their own, neither of these things are so incredible, but when combined they are very convenient. They are made like so:
lore.item_sorting.post_recipe=§r§rThe Sorting Hopper functions almost identically to a normal hopper but for a sutble difference that has huge ramifications. While a normal hopper processes extracting items after inserting them, the sorting hopper processes extracting items before inserting them. The reason this is important is that if you make a pillar of sorting hoppers, with them all facing sideways into inventories, then items go into the top inventory first, then the second inventory, and so on. This does not occur with normal hoppers. This means you can filter items. If the top inventory can only accept sand and the middle one accepts only dirt and the bottom one takes anything, then putting dirt, sand, and gravel into the top hopper will result in all the sand going into the top inventory, all the dirt going into the middle inventory, and all the gravel going into the bottom inventory. The Slotted Chest is a chest the size of a double chest, and it has a very interesting quirk. You might notice when using it that you can't shift click item into it, and when removing items from the slotted chest it leaves a sort of ghost item behind? You can shift click into the slotted chest, but only if the slot the items are going to already has the matching item. To clear a ghost item, shift click it with an empty cursor. Also, automation will respect the ghost items, only being able to insert into a slot if it already has a match and when extracting items, always leaving a ghost item behind. This allows you to format your storage chests without fear of shift clicks or automation messing it up. I assume that at this point you see how the slotted chest and sorting hopper complement each other? Therefore, you can now have automated sorting systems that puts the stone in the blocks chest, the diamonds in the valuables chest, the wood in the blocks chest, and so on. §r§oHold on. Don't you mean wood goes into the plants chest? §r§rNo of course not, if I put logs there then I'd have to put planks there, and chests there, and pretty soon I'd be putting tripwire hooks in the plants chest. §r§oNo, the tripwire hooks go into the technology chest. §r§rYou really put wood in the plants chest? What's next, putting coal in the plants chest because it used to be plants 100 million years ago? §r§oDon't be ridiculous, coal goes into the burnables chest. §r§rYou make a burnables chest? Then why don't you put wood in it? §r§oBecause wood is not for fuel, it is for other things. Do you put cactus in the blocks chest, it's a block? §r§rNow you're just mocking me. Witch, you decide. Does wood go into blocks or plants? §r§nI don't bother sorting, I just stick stuff in random chests for later. §r§oWhat? How do you find anything? §r§nI just remember where stuff is. There's no need to be OCD like you two. §r§rAt least we don't end up spending half our time looking for things. §r§lhOI me iS BOBO! dem peoples go on and on about some copper hopper for ever. copper hopper rhymes! COPPER HOPPER COPPER HOPPER COPPPER HOPPPER! Me know trick with hopper. It not copper hopper though. Me make vacuum hopper, it useful for everything! getting sTuff, flying, herding cats, everything! Just one funnel, a sheep's coat, or maybe jacket, and a tube! BOBO OUT!
lore.ob_cutting.pre_recipe=§r§nBecause mining obsidian is the most painful thing in the universe, I'll tell you how to make it easier. Once you get your first piece of obsidian, you can use it to create 4 obsidian cutting kits like so:
lore.ob_cutting.post_recipe=§r§nSimply right click it on some obsidian to insta-mine the obsidian and destroy the cutting kit. I find it's very convenient for getting lots of obsidian.
lore.decorative.pre_recipe=§r§nSometimes after a long day of working hard and building technology, you just want to relax in a pretty area. A few nice things for decorating with ar- §r§rFew? It's one thing. §r§nI'll come up with more things later! Anyway, the very nice decoration I came up with was the Candle Lilypad. It's a nice looking lilypad with a candle on it, and it gives off light. Just make it like this:
lore.decorative.post_recipe=§r§lhOI me is BOBO! me know things! l1lyPads is plant and chicken eat plant so chicken + lilypad equal LUMINATI! oH yEah! & m1x dem too things with a bit of cow for da mega thing! iT brake so ficks wid da potatoe from da brasier!
lore.fertile_soil.pre_recipe=§r§nFertile Soil is a nice aid to farming that I have created. It has 10 versions, for wheat, carrots, potatoes, beetroot, and the 6 saplings. §r§rWhy is there a beetroot version? §r§nWhat do you mean, what's wrong with beetroot? §r§rIt's not that there is anything wrong with beetroot, it's that there's nothing right with beetroot. It restores almost no hunger, beetroot soup doesn't stack, and red dye is already common in flowers. §r§nWell I like beetroot, so be quiet. Make Fertile Soil like so, filling in the wheat with the crop of your choic- §r§rEven beetroot? §r§nYES EVEN BEETROOT! §r§rCertainly not the crop of MY choice...
lore.fertile_soil.post_recipe=§r§rCrops can be planted on Fertile Soil like it was farmland, and they grow as if on hydrated farm land even without water. They also cannot be trampled. The main feature of Fertile Soil is that at random intervals, if there is nothing growing on top of it, it plants the crop corresponding to its type on itself for free. Therefore, you no longer need to replant. An important note is the sapling variants, with those it not only replants at random intervals but also whenever it gets a block update, meaning it usually replants instantly. 
lore.multi_piston.pre_recipe=§r§rThe standard piston is sufficient for everyday use, but sometimes a more advanced version is required. To satisfy this need, I present the Multi-Piston. It works like a normal piston, but for a few differences. The biggest difference is that instead of extending 1 block, it extends the number of blocks equal to the strength of the redstone signal it is receiving (up to 15 blocks). It also can push up to 64 blocks at a time instead of 12, and it extends and retracts instantly. When pushing entities with slime blocks, pushing farther at once multiplies the effect. §r§oSo if you push up 15 blocks, does it launch you really high? §r§rYes. §r§oCould you launch something else with that? Like, I don't know... Some lit explosives at midnight during a full moon? §r§rYes... But... Why? You aren't thinking of blowing up the moon are you? §r§oWhat I do on my own time is none of your business. §r§rThat wouldn't even work, I mean... the explosives would go high, but not that high. §r§nI'm sorry, why do you want to blow up the moon again? What did the moon ever do to you? §r§rWhat do you mean 'What did the moon ever do to you'? You need a reason to blow up the moon? How about: Blow it up not because it is easy, but because it is hard. Also because it's a useless piece of rock. §r§nWasn't that the justification for going to the moon? §r§rThat's irrelevant. §r§nLet's get back on topic... §r§rThe Multi-Piston also doesn't have quasi-connectivity. §r§nQuacking what? §r§rQuasi-connectivity. Before you ask, if you don't know what it is then you probably won't care. As I was saying, the Multi-Piston can also have redstone placed on top of it directly. The Multi-Piston has a normal and sticky variant, made like so:
lore.multi_piston.post_recipe=§r§rThere is also a simpler recipe for normal pistons that is shapeless, which is this:
lore.ratiator.pre_recipe=§r§rThe Ratiator (pronounced ray-shee-ate-er) is a more advanced comparator. It is made like so:
lore.ratiator.post_recipe=§r§rNote that it requires materials from the magic system. Instead of comparing two values or subtracting them, it multiplies and divides. Its two modes (changed with a right click) are multiplication and division. The symbol on the plate changes based on the mode. It multiplies (or divides) the value at the back by the largest input of its two sides. Notably, it can work with decimals or values greater than 15. The moment it outputs to redstone, however, it rounds to an integer and caps it at 15. To take advantage of the ability to use other values, Ratiators can take input from another Ratiator directly, avoiding capping and rounding.  It can measure things behind it like a comparator, but not through a solid block. Most comparator-readable things in Crossroads will be able to output decimals and numbers greater than 15 to a Ratiator. Shift right clicking a Ratiator with an Omnimeter displays the output.

#Magic
lore.basic_magic.pre_recipe=§r§rAt this point, you should have built up a decent infrastructure of machines and have a good amount of resources. The next topic is magic. §r§oHold on, magic? There's no such thing as magic, you should know that. §r§nFor once I'm siding with the Technomancer, magic is real. §r§rMagic is real, depending on your definition of magic. §r§oHow could magic possibly be real? Heat is real, dirt is real, creepers are real, §r§rWell actually, I'm not so sure about that last one, on an absolute scale. §r§oI'm not interested in your theories about our universe being fictional right now, I'm trying to argue magic doesn't exist. The idea that stuff happens because someone waves a magic wand and says some gibberish is ridiculous. §r§rOh I see, you thought I was talking about fantasy magic. I was talking about magic in a 'Sufficiently advanced technology' kind of way. What I'm talking about is beams. §r§oThen why didn't you just say beams. They aren't magical. §r§nWhat are beams? Because I'm talking about magic in a wands and spells kind of way. §r§rWands and spells don't exist, don't be ridiculous. §r§nYou just think that because you don't know witchcraft. §r§rNonsense. Anyway, we are getting diverted. I'll get to how exactly you create and manage magic seperately, this section is just about the concepts. What I'm calling magic is actually a form of energy similer to light. I differentiate it from light because it doesn't obey the same rules that light does. Its speed is non-constant, it can't pass through glass or other clear objects, it reacts with certain crystals in specific ways, and the beams can have different effects based on color. Not to mention the color of all magic is in the visible spectrum. Let me elaborate. There are 4 basic elements. §r§o3, not four. Void doesn't count. §r§rI'm counting void. Semantics aside, each of the elements is assigned to a different color: Energy is red, Potential is green, Stability is blue, and Void is black. Energy is obviously a measure of how much energy an object has. Potential is a little subtle, while the element of energy refers to energy that is currently expressed, such as heat or motion, potential is the energy something might have eventually. Such as a piece of coal potentially having a lot of energy if you burn it, but not until then. Stability is how stable something is, obviously. Uranium or TNT isn't very stable, but lead or a brick is. Void is an odd one though, and it is an advanced topic that will be covered separately. Magic is measured in discrete units. §r§nWhat? §r§rI mean magic is measured in whole numbers only. Specifically 4 whole numbers, each number referring to a different element. The interesting thing about elements is what happens when you mix them. A beam could be 3 parts energy and 3 parts potential, which would make a yellow beam. The entire RGB chart is possible. Beams are assigned an element based on the color. There are a lot of elements, so we'll only mention the important ones as needed and leave the rest for you to discover. Magic travels in beams, analogous to beams of light. If a beam collides with any block that isn't specially designed to handle magic, or it goes 16 blocks without hitting something, then it does an effect at the end of the point. The effect changes based on the element. Pure energy beams heat machines up, potential beams make things grow incredibly fast, and stability beams do nothing at all, due to being so stable. Many effects, but not all, are made stronger the more total magic is in the beam, but stop getting stronger at and above power = 64. The main purpose of using magic is the different beam effects. Beams become visually thicker at higher powers, until power 64 where they collapse into a thin beam. All of the devices involving magic will need a crystal of some kind, and most of them will need some Pure Quartz. Pure quartz can be made like so:
lore.basic_magic.mid_recipe=§r§rThe other crystals of interest are rubies, for interacting with energy, emeralds, for interacting with potential, and diamonds, for interacting with stability. Sometimes a machine will need a lens array to manage beams of magic. Lens arrays are very expensive though, so use them sparingly. Make some like so:
lore.basic_magic.post_recipe=§r§rI should note that when a beam passes through a magical device, it is delayed for 5 ticks before it exits the machine. This includes things like Arcane Reflectors and Beam Splitters.
lore.elements.name=Magical Elements
lore.elements.preamble=Information about the various elements will be added to this entry as you discover them. 
lore.elements.charge=CHARGE: Creates lightning wherever it hits. Turns any rock materials into redstone blocks. In a Crystalline Master Axis it adds 10 energy/tick in the + direction. 
lore.elements.enchantment=ENCHANTMENT: Enchants nearby items on the ground randomly. Higher power beams increase enchanting level. Can create treasure enchants with power >= 32. 
lore.elements.energy=ENERGY: Adds (power)°C/5 ticks to whatever heat devices it hits. In a Crystalline Master Axis it adds 10 energy/tick in the direction gears are currently spinning.
lore.elements.equalibrium=EQUALIBRIUM: The force of a stalemate, where equal powers fight against each other leading to no net change. Does nothing on its own. In a Crystalline Master Axis it reduces the change in energy each tick by 75%%. 
lore.elements.expansion=EXPANSION: Expands items within a range of (power) into full blocks.
lore.elements.fusion=FUSION: Fuses the molecules of certain blocks into other blocks. Turns Sand -> Pure Quartz Block when power >= 16, Water -> Ice, Snow -> Ice, Distilled Water -> Packed Ice when power >= 4, Netherrack -> Nether Brick when power >= 8, Gravel -> Prismarine when power >= 8, Prismarine -> Prismarine Bricks when power >= 12, Prismarine Bricks -> Dark Prismarine when power >= 16, Cobblestone -> Stone, Stone -> Stone Bricks.
lore.elements.light=LIGHT: All magic is similar to light, but this element is closer than most. Converts rock materials into glowstone, and glass materials into sea lanterns. 
lore.elements.no_match=NO_MATCH: This element should not be obtainable. Report to mod author. 
lore.elements.potential=POTENTIAL: Brings out the potential in living things, growing crops faster based on power & healing mobs within a radius of √power by power/2. 
lore.elements.rift=RIFT: A form of energy that makes things more stable. Such a thing is not possible in our universe, so it opens a rift into a neighboring universe where such a thing is possible. This universe is where mobs come from. Spawns hostile mobs (up to cap) at a rate based on (power). When power >= 64, spawns 1 mob every 5 ticks. Converts purpur blocks -> shulkers, skulls -> wither skeleton skulls, & stone -> silverfish stone. 
lore.elements.stability=STABILITY: Does nothing on its own. In a Crystalline Master Axis it prevents power loss. 
lore.elements.time=TIME: Speeds up tile entities and random block updates based on power. DO NOT MIX WITH VOID! 
lore.elements.void=VOID: A paradoxical element, the essence of nothingness that forms the barrier between worlds. If anything, this is what holes are made of. Destroys anything it touches. 
lore.color_chart.pre_recipe=§r§rThe main use for magic is the effects of the different elements. You will have to discover the colors of the different elements yourself for the most part, but there are several things that can help you. First of all, using an Omnimeter on any block that emits beams will tell you the color and elemental makeup of the last beam that block fired. If the element is one you haven't scanned this way before, you will 'Discover' that element. That is useful for the Color Chart, made like so:
lore.color_chart.post_recipe=§r§rThe Color Chart has an informative GUI. The GUI is, unsurprisingly, a color chart, and mousing over a point on the color chart tells you the RGB value of that point and the element of that point, IF you have already discovered that element with an Omnimeter. Any spots on the chart with a red X over it has an element you haven't discovered yet on it, so you should try to create a beam of that color and discover it. There is also a search bar that will X over any element that doesn't match the search.
lore.arcane_extractor.pre_recipe=§r§rBefore you can start harnessing magic, you need to obtain some. The Arcane Extractor is the crudest way to obtain magic. Make one like so:
lore.arcane_extractor.post_recipe=§r§rIt has a front which can only be on the horizontal plane, and items can be inserted into any side with a hopper. The extractor destroys any item inserted almost instantly, and produces a beam out the front side based on the item used. Most items don't make any beam, and just get consumed. The beam exists for 5 ticks, then vanishes. Feeding it items with a hopper would make a pulsating beam. The items it can use are redstone dust to produce a beam with 24 energy and 36 potential, glowstone dust to produce a beam with 1 energy, 1 potential, and 1 stability, salt to produce a beam with 24 potential and 36 stability, and coal (OR charcoal) to produce a beam with 36 energy and 24 potential.
lore.quartz_stabilizer.pre_recipe=§r§rThe Quartz Stabilizer is a way of turning pulsating beams into constant ones. There are two varieties, made like so:
lore.quartz_stabilizer.mid_recipe=§r§rYou might notice that the Small Stabilizer needs a lens array, making it quite expensive. Once you get your hands on some luminescent quartz, which will be covered later, stabilizers can be made much more cheaply like so:
lore.quartz_stabilizer.post_recipe=§r§rQuartz stabilizers can face any direction when placed, and when it receives a beam from any direction other than the front it stores the magic of the beam within itself. The stabilizer will emit a constant beam out the front, draining the stored magic to do so. The stabilizer has a capacity of 30 magic for the small version and 150 magic for the large one. Please note that is 30 units of magic (energy + potential + stability + void) not 30 beams. Any excess magic is lost. The emitted beam has 6 magic for the small version and 15 magic for the large version, and has the same color as the stored magic. The problem is that due to magic being measured in whole numbers and there is a limit on the output of the stabilizer, the outputted color might not exactly match the stored color. Therefore, the stabilizer is most reliable for beams that only contain one basic element, not a blended color. To recap, the stabilizer takes large pulses of magic in, and emits a constant small beam of magic out the front. There is no way to make a stabilizer hold onto its stored magic without emitting it, so it can't be used for long term magic storage.
lore.lens_holder.pre_recipe=§r§rThe Lens Holder is a very simple but useful tool for manipulating beams. Make one like so:
lore.lens_holder.post_recipe=§r§rWhen placed down, the lens holder can hold certain gemstones. They can be inserted/removed either with automation or a right click. The Lens Holder can hold either a diamond, ruby, emerald, or pure quartz. When a beam passes through a Lens Holder with a gem in it, the lens holder acts as a filter, with the magic that isn't allowed to pass through simply being lost. A diamond allows stability, a ruby energy, and an emerald potential. Pure quartz does not act as a filter, and allows any element to pass through. A word of warning, none of the gemstones can block void and if a beam passes through the Lens Holder with any void in it, the lens will be destroyed. If a beam of the LIGHT element passes through and the lens holder has pure quartz in it, the pure quartz turns into luminescent quartz, which is a crafting ingredient. The light element is the white color, and any color relatively close to white. The Lens Holder also interacts with comparators, emitting a signal based on the power of the beam it is outputting. The equation is redstone = (power / 3) rounded down. Also, the Lens Holder is one of the few devices that will NOT add a 5 tick delay to beams passing through it.
lore.arcane_reflector=§r§rAn Arcane Reflector is one of the basic tools for manipulating beams. It can face any direction, and when given a beam in a side that isn't the front, it outputs the beam through the front. It can also blend beams by putting multiple beams into it at once. Make one like so:
lore.beam_splitter=§r§rYou know how to combine beams, with an Arcane Reflector, but you still need to know how to split beams. The Beam Splitter takes any beam and splits it into 2 beams. Beams go in the sides, and come out the top and bottom. The two outward beams aren't the same size, but they are the same color as the input (with a margin of error, dividing whole numbers again, but no magic is lost in the end). There are two versions of the Beam Splitter, the Basic Beam Splitter and the Redstone Beam Splitter. With the Basic Beam Splitter, the two output beams are the same power. The distribution of magic between the top and bottom beams with a Redstone Beam Splitter depends on the incoming redstone signal strength. The bottom beam has (redstone strength) / 15 of the magic, and the top gets the rest. Make Beam Splitters like so:
lore.crystalline_prism=§r§rThe Crystalline Prism has a front that can only be placed on the horizontal plane, and is another version of the Beam Splitter. Instead of making two beams of identical colors, it takes a beam in the back (opposite of front) and outputs up to three beams made from the input beam. A pure energy beam from the left of the front, a pure potential beam from the front, and a pure stability beam from the right of the front. Any void in the original beam is lost. Crystalline Prisms are expensive, so use them sparingly. You can make one like so:
lore.crystal_master_axis.pre_recipe=§r§rThe Crystalline Master Axis is an alternative to a normal Master Axis, made like so:
lore.crystal_master_axis.post_recipe=§r§rIt functions identically, but for one key difference. It can accept magical beams and alter its behavior based on the element. It can only have the effect from one element active at a time. Every time it receives a beam (limit one beam/side/5 ticks), it acts differently based on the element for the next (beam power * 5) ticks. The timer does not get reset each time it receives a beam, but instead increased. Each time it receives an element different from the previous one, it resets the timer and switches to the new element. Not all elements have an effect, but for example energy increases the total energy of the gear system by 10/tick if there is any energy to begin with, and equilibrium decreases the change in energy each tick by 75%%. An Omnimeter can measure the current element and duration in a Crystal Master Axis.
lore.void.pre_recipe=§r§nFinally, something related to witchcraft: Void. Void is the fourth element, and very powerful. At this point, you should have gone to the End and killed the dragon. Void is pure black, the essence of nothingness. To create void beams, fire a beam of Rift through a Lens Holder with a Void Crystal, made like so:
lore.void.post_recipe=§r§nThis will emit a beam of pure Void, of the same power of the Rift beam. On its own, the Void beam isn't so interesting, it just destroys blocks it touches. Although... It can destroy any block, even things normally indestructible. Mixing even a tiny bit of void with any other element will change the effect. Usually the new effect is the opposite of the original effect, though not always. I'll let you work out the exact effects on your own, but they are usually pretty easy to guess. For example, Void-Energy cools things down instead of heating them up, while Void-Stability makes explosions based on the power of the beam. §r§rI should cut in here, and deliver a warning. If you have discovered the Time element, DO NOT COMBINE IT WITH VOID. Time and Void are opposing forces, and the results of mixing them can't be good. Also, the Crystalline Master Axis acts differently with beams containing Void than with beams free of Void. §r§lh3ll0! 1s m3 B0BO! mE hearded tingy 'bout drahgin. mE gots trick 4 U! Bobo smoogle it owt of deferent dementchion! Da bit of drahgone dey mentun b4, da prize dat started dat war with that wuden hoarse, and a hot rod! Hop to It! So U kan blink! BOBO 0UT!
lore.beacon_harness.name=Beacon Harness
lore.beacon_harness.pre_recipe=§r§rA much stronger source of magic than the Arcane Extractor is available in the form of the Beacon Harness, made like so:
lore.beacon_harness.post_recipe=§r§rWhen running, it produces a constant beam of about power 512. The color of the beam is not constant, however, and changes over time. If you look at a Color Chart, the color of the beam produced follows the rim of the chart in a circle. It goes in a complete loop once every 30 seconds. While it can produce very powerful beams, it has a stringent set of requirements. It must be placed 2 blocks above a beacon with no obstruction in between (so beacon then airspace then harness). In the pattern the color follows, the beam emitted will always contain 2 or fewer basic elements. In order to keep it running, it needs to be supplied with the 1 basic element it isn't emitting (so if it's emitting a mixture of STABILITY and POTENTIAL, it requires pure ENERGY). Supplying it with an element it is emitting will cause it to shut down. It runs regardless of the inputted beam for the next 2 seconds after and while emitting a pure element, giving any system built to supply it a time margin to adjust. The Beacon Harness starts in the shut down position. To turn it on, trigger it with redstone (it will keep running after the redstone turns off) and it will run after a 2 second cooldown. 
lore.beacon_harness.bobo=§r§lsChlerpety sklurp, mE no a1veys drane flew-id, bUtt wen iy du, m3 uyse dis ting! vA((ewm tueb, bl^ck gemm, dRie mEhga lAser fYsh pRyze! b0Bo, AWAY!

#Technomancy
lore.cat_technomancy.name=Technomancy
lore.copshowium_chamber.name=Copshowium Creation Chamber
lore.copshowium_chamber=The basic material for Technomancy is copshowium, an orange metal that can be made into blocks, nuggets, and gears. Copshowium is a unique material in that while most materials extend in the three dimensions of space, copshowium extends in the three dimensions of space, as well as time. When copshowium moves in certain ways, it causes the fabric of time to move with it, making it ideal for technomancy. Although I dislike using the phrase 'fabric of time', it brings literal fabric to mind making me always end up getting distracted trying to decide if time acts more like denim or linen. Sorry, getting sidetracked again. Copshowium gears have 0 mass, so they won't contain any energy while spinning, and have no loss. Their speed is determined by the Rotation Ratio and the speed of other gears. With a normal Master Axis, you can not create a gear network entirely of 0 mass gears, because there is nothing to set the speed. There are special Master Axes in Technomancy that do allow it, however (allowing for energy free networks). Copshowium is made in a Fluid Cooling chamber using 144mB of molten copshowium to make 1 ingot when below 1000°C, adding 100°C per craft. Molten copshowium can be made in 2 ways. Both require a Copshowium Creation Chamber, and one of the ways requires progressing farther into Technomancy. A Copshowium Creation Chamber can store 1296mB of fluid. Liquid can be extracted out the bottom, and both inserted and extracted through the top (so Fluid Tubes use the pressure system). The first way to make copshowium is to insert molten copper into the chamber and hit it with a time beam of power=(amount of fluid)/72, give or take 1. Using a power below this will have no effect, and a power higher than this will destroy the contained fluid to no benefit. Using the correct power will turn the molten copper into molten copshowium, with each 5mB of copper into 9mB of copshowium. Overfilling the chamber (creating > 1296mB of molten copshowium) will break the chamber. Mixing copper and copshowium in the chamber will destroy the copshowium. §r§nHey, quick question. §r§rI am busy doing the Technomancy section. Alone. What do you want? §r§nWhy is there a bear trap in the fridge? Because I didn't put it there, and the Alchemist says he didn't put it there, so that leaves you. §r§rIt is a trap- §r§nFor bears? Because I haven't seen any. §r§rFor 'Bobo'. Somehow, some idiot has gotten past the best security system in the world, entering a laboratory in a different dimension, and getting past defenses that can kill intruders in 83 different ways. §r§nA: What makes you security system 'The best in the world'? and B: So you thought you could catch someone who can get past your fancy defenses with a beartrap. §r§rA: The fact that I made it, and B: yes. §r§nA beartrap in a fridge. §r§rYes. §r§nDo you normally see people climb into fridges? Because I don't. §r§r'Bobo' has gone into my fridge at least twice before. He ate my sandwich. So I put in a second sandwich with poison in it. And then that one vanished too. §r§nWait, that sandwich was poisoned? Is this a quick acting poison or... §r§rA very fast acting poison I had the Alchemist make for me. The only cure is an obscure chemical, which... come to think of it, is in mayonnaise, which the sandwich had on it. Drat! §r§nthat's a relief. §r§rYou were muttering there. What was that? §r§nNever you mind. Do me a favor, next time you poison a sandwich, put in a sign. §r§rThen the person eating the sandwich would know it was poisoned, which kind of ruins the whole idea. §r§nJust stop poisoning food in the fridge. §r§rWait, what were you doing looking in the fridge? I never said you could go in my fridge. §r§nOh wow, look at the time, I've got to go do a thing. §r§rOdd, they didn't even glance at a clock. Anyway: The second way to create copshowium is the same process, but uses distilled water instead of molten copper & requires using fields (later Technomancy concept). In order to turn distilled water into molten copshowium, when the time beam hits the chamber the node the chamber is in must be unlocked and the node will lose (distilled water content)/9 flux, so a field management system must be designed accordingly. 
lore.goggles.name=Modular Goggles
lore.goggles=Going forward, an Omnimeter will not be sufficient. A far superior alternative is Modular Goggles. They are a headpiece that provides no armor, but does not break. On there own, they do nothing. Lenses can be added to the goggles in an anvil with either a Ruby, Emerald, Diamond, or piece of Pure Quartz and 2 levels of experience. Multiple lenses can be added, but only one of each type. Looking at a block that can be read by an Omnimeter (and quite a few that can't be) while wearing goggles with the correct lens will cause information to be displayed (and updated every tick). A Ruby lens reads things related to heat, an Emerald lens is for rotary things, a Diamond lens for fluids, and a Pure Quartz lens for magic or the output of a Ratiator. Goggles can also provide information not shown by an Omnimeter, such as the rotation ratio of a gear just by looking at it with an Emerald lens. Certain things later on require Goggles to be measured at all. §r§lluk thru darcnes. 
lore.redstone_keyboard.name=Redstone Keyboard
lore.redstone_keyboard=The Redstone Keyboard is a convenient way of having constant redstone signals of a specific strength. Right clicking one will open a GUI where a number can be set. Setting the value to "PI" will cause it to be set to the value of π. When measured by Ratiator, it emits a signal of the strength set in the GUI. It can also be measured by Comparator, in which case it rounds the contained value and caps it at 15. It can not be set to negative numbers. §r§lwH33l round da poppy, p0kit ful a poze, sharkoal, charca0- oOh sPe@kin uv wHele! frE poWer! 1is73n REAL CL0S3 nOW! iRin sChtik, tImy-wimy oRaNGe nugit, mETE nuGgite wid da numbers 0f da sEkrit! Ya noe, hte seKrit of tings! tIngs 1ik lIfe, da maNyVerse an evEryTing! too nUmbers on da NuggEt tat are form dA Sekrit nUmber! Due all tis for frE pOweR! bObo OUT! WHOOPSE me Drop tIng! oH weLL! §r§rHaving returned to the journal, it appears that once again 'Bobo' has interfered, but this time I cannot ignore it. This 'Bobo' has left behind what appears to be a jellyfish on a stick. After some experimentation with it, I have come to the conclusion that it is a sort of teleportation device which violates several laws of physics, and yet does not use Technomancy. From this, I have drawn an interesting conclusion. I have for months been working on a theory of time and space which states that there are infinite universes. While, for example, the Nether and End, may seem like other universes, they are actually part of this universe, and are different dimensions. According to my as yet unproved theory, each universe would have different laws of physics. I don't just mean different fundamental constants, but entirely different rules, so there may be worlds where gravity goes diagonally or there are blue and orange holes in space that link together, or maybe one where people can shoot lightning out of their hands and dragons are everywhere whose voices can do magic, or possibly a universe where everyone is made of red crystals and time only moves when some random guy does, or even a universe where breaking the bottom section of a tree makes the entire tree collapse. Many other whimsical, ridiculous, impossible things may, and most likely do, exist in some universe. According to my theory, if an object were to somehow move from one universe to another, it might bring certain laws or rules with it. So this object that looks like a jellyfish on a stick would normally not work in our universe, except this one came from a universe where these things do work, so it can work here as well. Now, of course I have investigated the possibility of travel between universes, but according to my theory it would require more energy than there is in our entire universe to do. Certain things can leak through just fine, like zombies getting brought to our universe by RIFT beams, but those are a special case as our universe, and the universe where zombies come from, are, according to my theory, entangled, which allows certain very specific things to move through quite easily (such as zombies and other mobs coming to our universe, but nothing else). Now, the only explanation for this object which violates our laws of physics, for some idiot getting past an incredibly advanced security system, for the contents of some of the messages they have left behind (which I have now examined more closely. 'smoogle it owt of deferent dementchion' indeed!), is that somehow, this idiot, this 'Bobo', has found a way to travel between universes at will, which my somewhat incomplete theory of time and space does not yet include. I must, and indeed I shall, capture this 'Bobo' and find out how they do it! 
lore.redstone_registry.name=Redstone Registry
lore.redstone_registry=The Redstone Registry is similar to a Redstone Keyboard, except it has multiple preset outputs that it cycles between. It can store up to 64 values, and will emit (when measured by Ratiator or Comparator) the value it is currently at. Every time it receives a redstone signal, it emits the value that is set (rounded signal strength received) ahead of its current value, looping from the final value to the first value as necessary. If the signal it receives is equal to or greater than the number of values it has set, it resets to the first value in the list. The GUI is rather complex, and contains 5 buttons: #, +, -, ▲, ▼, as well as a bar for entering values (which are locked in by pressing enter) and an area where values are displayed. It can display up to 3 set values at a time in the GUI, and which ones are viewed is controlled with the ▲ & ▼ buttons. The top of the 3 values displayed (referred to as the focused value) is the one edited by the input bar. A new value can be added with the + button (inserted directly after the currently focused value), or the focused value can be removed from the sequence with the - button. The currently emitted value can be set to the value focused in the GUI with the # button. The currently emitted value is colored yellow in the GUI.  §r§lbDuh bDuh bddd U nEver gONnna gIv me uP, s0mETimEs m3 goNa let U down! §r§rI have spent the last 8 hours trying to decipher the message hidden in this intrusion, in the hopes that it will help me track down 'Bobo'. As of yet I have been unable to decipher this message, but I shall persevere! I am considering making some sort of mechanical computer to aid me in decoding these messages, but I can't see any pattern to them that a computer could use. 
lore.rotary_math_devices.name=Rotary Mathematics Devices
lore.rotary_math_devices=Prior to now, the rotary system has been used as little more than an energy type. In Technomancy, the rotary system is used in a far more advanced role: control. The exact speed, and in some cases the exact number of rotations performed (speed * time) will matter. For this reason, the following devices allow greater control over rotary systems. The following devices are different types of Master Axes, all of which can control a network made entirely of 0-mass gears. The Redstone Master Axis will cause the connected gear to spin with a speed equal to the strength of redstone signal received, and it can use values > 15 or with decimal points if Ratiators are used. All other connected gears have a speed based on Rotation Ratio and the speed of the first gear. In order to cause the attached gears to spin if they have non-zero mass, energy is required which can be provided by a gear on the back of the Redstone Master Axis. The Redstone Master Axis can point any direction. It is often convenient to use Redstone Master Axes in tandem with Redstone Keyboards. Any excess energy in the gear network is inserted into the energy providing gear, any required energy is drawn from it, and if there is not enough available energy then all controlled gears will stop spinning. If the gear network has 0-mass, no energy providing gear is required. The following Master Axes types set the speed of the attached gear based on the speed of other gears. Linking one of these Axes inputs to its output will destroy the Master Axes (dropping it as an item), as otherwise there would be an infinite loop. It is allowed to connect one of these Axes to its own power gear, though fairly pointless to do so. All of the following devices can only face horizontally and have an energy input on the bottom. The Addition Master Axis has 2 inputs (marked by two blue rings on the model) and an output (the top). The controlled gears will have a speed equal to the sum of the speeds of the 2 input gears. If they were to spin in opposite directions, it would be subtraction. (For those who care, the model of the Addition Axis shows a real life device called a differential). The Multiplication Master Axis has two inputs (back and top, marked by blue rings), and 1 output (the front, marked by an orange ring). The output speed is equal to the product of the two input speeds times -1. Note the fact that it multiplies the output by -1. If provided with a redstone signal, the Multiplication Axis does division instead, with (output speed)=-(back input speed)/(top input speed). Once again note that the answer is multiplied by -1. (For those who care, the Multiplication Axis model shows a complicated device of springs and continuous transmissions which, if designed for a specific set of units, could in theory multiply the speeds. However, a real device like the one in the model would have a LOT of energy loss. The model is the reason it multiplies the output by -1.). The Square Root Axis has an output speed of the square root of the input speed (with an output speed of 0 for negative inputs). The Sin and Cos Axes do the Sine and Cosine operations respectively in θ. There is no Tan Axis as tangent(θ) = sine(θ)/cosine(θ). The ArcSin and ArcCos Axes do the ArcSine (inverse sine) and ArcCosine (inverse cosine) operations respectively. The Equal Axis has two inputs (to the left and right of the output), and will output the input speed if, and only if, the two inputs have equal speed. The Greater Than Axis has two inputs on the top and back, and has an output speed equal to the back input speed if, and only if, the back input has a higher speed than the top input. The Less Than Axis has two inputs on the top and back, and has an output speed equal to the back input speed if, and only if, the back input has a lower speed than the top input. Finally, there is a much cheaper recipe for the normal Master Axis as part of Technomancy. 
lore.workspace_dim.name=Personal Workspace Dimension
lore.workspace_dim=It is possible to build a portal to a personal empty dimension called a "Workspace Dimension". Although saying you are building a portal doesn't do what is actually happening justice. What is actually happening is the application of the technomancy concept that if time flows, then reality must exist, so if time is forced to flow in an empty void it will force reality to form a dimension around it. The first portal you build will use copshowium parts to forcibly start time in the void, creating the dimension. It has no weather, mob spawns, celestial bodies, sunlight, and starts out with only a single stone brick block over the void. Each player gets there own copy that can be built in. It is highly recommended to design field (later Technomancy mechanic) systems in a Workspace Dimension, as there are no flux effects in Workspace Dimensions at all. In order to construct a portal to a Workspace Dimension, create 3 Gateway Frames. Place a Gateway Frame pointing down; The portal will be a 3x3 below this. From the Gateway Frame, go 2 blocks down, and 2 blocks to one side. Place a Gateway Frame pointing inwards. Repeat for the opposite direction. Other blocks near or inside the portal do not interfere. To activate the portal, send a RIFT beam into the top of the upper Gateway Frame. The portal opens and closes instantly, and is only open while a RIFT beam is provided. The portal will link to [0, 33, 0] in the Workspace Dimension, and links to the dimension belonging to the player who placed the top middle block of the gateway (for this reason, fake players cannot place Gateway Frames). Exiting a Workspace dimension can be done either by dying or by using an identical gateway in the Workspace Dimension. A gateway in a Workspace Dimension will by default link to [0, 0, 0] in the Overworld, but the coordinates can be changed. Attaching gears to the ends of the two side Gateway Frames (the side opposite the middle) will allow controlling the X and Z coordinates with the angle the attached gears have rotated (the gear in the north or west direction controls the X coordinate, the gear in the south or east direction controls the Z coordinate) in θ. For example, if a gear on the end of the south Gateway Frame makes 3 rotations clockwise, it increases the target Z coordinate by 6π. A gear attached to the top Gateway Frame on a side other than the top or bottom controls the Y coordinate. §r§nWould it be a problem if I were to push the button labeled DO NOT PUSH? §r§rDo you want to know what the inside of your ears tasted like when you were -5 years old? Because pressing that button is a great way to find out. §r§nI'm not sure if that was a threat or if you've finally snapped. §r§rI mean, that button controls an experimental flux overcharger I've been working on, I mean you press that button and the entire Time-Space continuum collapses to occupy a negative volume, and even worse the dimensions of time and space rotate 90 degrees so length is width and width is depth and depth is time, and you really do not want to know what time is, I mean that button is basically a universal self-destruct button. If you press it, there's no telling exactly what would happen. §r§nWHY WOULD YOU EVEN HAVE THAT JUST ON SOME RANDOM WALL? §r§rSome random wall? Oh, thaaat button labeled DO NOT PUSH. That one's just a decoy that captures who ever pushes it, to catch intruders. The end-of-time-and-space-as-we-know-it button is secure behind enough safeguards that no one, other than me, could ever get to it. §r§nSo the nut who can get past your other 'impenetrable' security system can't get to it? §r§rNote to self: remove that button. Now if you don't mind, I am busy. As I was saying: Closing and re-opening the gateway (such as by disabling the incoming RIFT beam temporarily) resets the target coordinates to [0, 0, 0]. Modular Goggles with an Emerald lens displays the dialed coordinates when viewing the top Gateway Frame. 
lore.mech_arm.name=Mechanical Arm
lore.mech_arm=The Mechanical Arm is a block that can move entities, interact with inventories to move items, place blocks, and use items. It is controlled by 3 attached gears and a redstone signal. A gear on the bottom controls θz, a gear on the east controls θb, and a gear on the west controls θt. A redstone signal is accepted on the north side. What matters to this machine is the angle rotated by the gears, not the speed. It starts out with θz = 0, θb = 17Π/36 radians, θt = Π/4 radians. The bounds for θb is [Π/6, 17Π/36], the bounds for θt is [Π/4, 3Π/4], and there are no bounds for θz. The Mechanical Arm has 2 segments of constant length, and the angle between them is controlled by the 3 θ values, as is shown by the following diagram. lower-length = 3, upper-length=5. 
lore.mech_arm.post_image=From this information, the formulas for the position of the end point relative to the top center of the base are found to be: (lengthCross and θd exist to shorten the calculations) 
lore.mech_arm.post_calc_1=Or, if that is illegible: lengthCross= √(lengthBase² + lengthTop² - 2lengthTop*lengthBase*cos(θt)), θd= θb + θt + arcsin(sin(θt)*lengthBase/lengthCross), x= -cos(θd)lengthCross*cos(θz), y= -sin(θd)lengthCross, z= -cos(θd)lengthCross*sin(θz). </n>If the end position is known and you want to solve for the angles required to obtain that end position, then: 
lore.mech_arm.post_calc_2=Or, if that is illegible: lengthCross= √(x²+y²+z²), θt= arccos((lengthBase² + lengthTop² - lengthCross²)/(2*lengthBase*lengthTop)), θb= arcsin(y/lengthCross) + arcsin(sin(θt)lengthTop/lengthCross), θz= arctan(z/x). </n>It is recommended to make some sort of automatic calculation device if you need to do these operations a lot. In order to make the arm actually do anything other than move, a redstone signal must be applied. The exact strength matters, and values only reachable by Ratiator are required. All signal strengths are rounded to the nearest whole number. The arm has 7 different effects, activated by redstone signal, and each effect gets a direction based on the redstone signal (although many of the effects ignore the direction). A signal of 0 does nothing, a signal of 1 resets all 3 θ values of the arm to default, and any other signal does an effect. The effects are referred to by index: 0: Pickup entity, 1: Pickup block, 2: Pickup from inventory, 3: Use, 4: Deposit into inventory, 5: Drop entity, 6: Release entity with momentum, 7: Pickup one from inventory. The effect done with a redstone signal is the one where index=(redstone - 2)/6, capped at 7. The side passed to the effect is referred to by index as well: 0: down, 1: up, 2: north, 3: south, 4: west, 5: east. The side used is index=(redstone - 2)mod(6). (That is, (redstone - 2) modulus 6). The effects, in order: Pickup Entity which will cause an entity near the end of the arm to be grabbed by the arm, provided the arm has no passengers. Pickup Block will break the block at the end of the arm, and if the arm has no passengers or is carrying an item of the type dropped by the block, will pick up the block's drops. Pickup from inventory will attempt to pull out 1 stack from the inventory at the end of the arm and put it on the end of the arm (uses the direction). Use will try to right click with the held item, or if it is an ItemBlock place it in midair (uses the direction). Deposit into inventory will try to place a held stack into the inventory at the end of the arm (uses the direction). Drop Entity will cause the held entity to be dropped straight down. Release with Momentum will release the held entity, but if the arm was in the process of moving the entity will be moving as well (which means you can make a trebuchet with this). Pickup one from inventory is the same as Pickup from inventory, except instead of trying to take up to a full stack, it tries to take exactly 1 item. The arm can pass through blocks, carry item entities, players, or mobs, and interact with things requiring a right click. 
lore.mech_beam_splitter.name=Mechanical Beam Splitter
lore.mech_beam_splitter=A more precise variant of the Beam Splitter is the Mechanical Beam Splitter. When placed, it can face any horizontal direction. The ratio used to split incoming beams between the top and bottom is controlled by the speed of the gear attached to the direction it is facing. Ratio=ω/15, capped at 1. It rounds magic normally for the down direction, and the remainder goes up.
lore.beam_cage_+_staff.name=Beam Cage & Staff
lore.beam_cage_+_staff=There are several handheld devices which require magic to run. In order to power them, there is the magical equivalent of a battery: the Beam Cage. It can store 1024 each of Energy, Potential, Stability, and Void. In order to charge it, a Cage Charger is required. Right click a Cage Charger with a Beam Cage to insert the cage into the charger. Right clicking it again will remove the cage. In order to charge the cage, send a beam into the charger from any direction other than down. The components of the beam will go into the cage, with any excess magic being lost. In order to use a Beam Cage with a device, there are 4 keybinds that need to be set: Energy Control key, Potential Control key, Stability Control key, and Void Control key (which, despite the name, have nothing to do with the ctrl key on the keyboard). Suggested default values are: 'R', 'G', 'B', & 'V' respectively. Devices powered by a Beam Cage can have there magic usage configured by holding the device, along with 1 of the elemental control keys, and right clicking to increase usage of that element by 1, or shift right clicking to decrease it by 1. The settings are capped at 8. The first such device is the Beam Staff. Holding it in one hand and a Beam Cage in the other while using the Beam Staff will drain the configured usage from the cage every 5 ticks, and shoot a beam from the staff in the direction the player is looking made from the magic drawn from the Beam Cage. The beam travels farther than usual, 32 blocks, and can collide with blocks but not entities. While it can do an effect at the end (which is the purpose of the staff), it cannot insert the beam into a device such as an Arcane Reflector. 
lore.prototyping.name=Prototyping
lore.prototyping.default=Using prototyping it is possible to compact large, complicated builds into a single block space and copy them quickly and cheaply. In order to produce a Prototype, you need a Prototyping Table. Place it down somewhere. It affects a 16x16x16 cube starting at its position plus 1 in each coordinate and ending at its position plus 16 in each coordinate (meaning the table in the lower corner of the cube). It is suggested that the entire area it affects be confined to 1 chunk for reasons that will become apparent with fields later on. A Prototype (the compacted design) can have 6 inputs/outputs (one per side of the block), and only certain things can go in/out of the Prototype (selected during construction). Ratiator signals, magic beams, heat, and rotary connections are the only things that can go in or out. Inside the design area (the 16x16x16 cube) you can build a system that will be copied into the finished Prototype. When building the design, assume there are solids walls, a ceiling, and a floor. Inputs and outputs are designated with Prototype Ports. The interface for a Prototype Port allows you to select what can travel through it, and whether it is an input or output. Rotary connections (connecting gears inside and outside the Prototype) and heat go in both directions, while ratiator signals and beams can only go in OR out of 1 port. In refers to into the Prototype, out refers to outside the Prototype. In the port interface, select a side. This will be the side of the final Prototype that connects to this port, and the side of the port that connects to the Prototype. It should be noted that beams and Ratiator signals to not pass through on there own in either direction, something must be connected. That is to say, for a Ratiator signal to go through, a Ratiator must be facing out of (reading) the output end. For beams to go through, the output side must be adjacent to something that can receive beams (such as an Arcane Reflector), as otherwise the beam will not go through. There can be a maximum of 6 ports, and only 1 port per side (additional ports are ignored). To create the Prototype after building a design (complete with ports) in the design area, go into the Prototyping Table interface, supply it with 3 copshowium ingots, and press the "Prototype" button. This will copy the design (at only the cost of the ingots) and create a Prototype block. The Prototype can be copied by placing it in the slot in the right side of the interface, along with the number of copshowium ingots required to produce it, and pressing the Prototype button to produce a duplicate. The contents of Prototypes are chunkloaded while the Prototype block itself is. There are a finite number of Prototypes that can be created (500), after which the Prototyping Table will refuse to produce (or copy) any more. Slots can freed up by placing an unwanted Prototype in the slot in the Prototyping Table with a recycling icon to destroy the Prototype, free up a slot, and return the copshowium ingots required to make it. Destroying the item in any way other than the recycle slot will NOT free up a slot. The slots are shared between all members of a server. There are certain blocks which are blacklisted from being part of a Prototype: other Prototype blocks (no nesting), Large Gears (a multiblock), Portals, and a few others. Things can be added to/removed from this list in the config (DO NOT allow nesting Prototypes or inserting Large Gears though). It is recommended that server owners/pack makers blacklist any multiblocks or ways of teleporting items/players/fluids into or out of the Prototype. 
lore.prototyping.consume=Using prototyping it is possible to compact large, complicated builds into a single block space. In order to produce a Prototype, you need a Prototyping Table. Place it down somewhere. It affects a 16x16x16 cube starting at its position plus 1 in each coordinate and ending at its position plus 16 in each coordinate (meaning the table in the lower corner of the cube). It is suggested that the entire area it affects be confined to 1 chunk for reasons that will become apparent with fields later on. A Prototype (the compacted design) can have 6 inputs/outputs (one per side of the block), and only certain things can go in/out of the Prototype (selected during construction). Ratiator signals, magic beams, heat, and rotary connections are the only things that can go in or out. Inside the design area (the 16x16x16 cube) you can build a system that will be inserted into the finished Prototype. When building the design, assume there are solids walls, a ceiling, and a floor. Inputs and outputs are designated with Prototype Ports. The interface for a Prototype Port allows you to select what can travel through it, and whether it is an input or output. Rotary connections (connecting gears inside and outside the Prototype) and heat go in both directions, while ratiator signals and beams can only go in OR out of 1 port. In refers to into the Prototype, out refers to outside the Prototype. In the port interface, select a side. This will be the side of the final Prototype that connects to this port, and the side of the port that connects to the Prototype. It should be noted that beams and Ratiator signals to not pass through on there own in either direction, something must be connected. That is to say, for a Ratiator signal to go through, a Ratiator must be facing out of (reading) the output end. For beams to go through, the output side must be adjacent to something that can receive beams (such as an Arcane Reflector), as otherwise the beam will not go through. There can be a maximum of 6 ports, and only 1 port per side (additional ports are ignored). To create the Prototype after building a design (complete with ports) in the design area, go into the Prototyping Table interface, supply it with 3 copshowium ingots, and press the "Prototype" button. This will destroy the design (by default it copies it, and it is possible to clone a Prototype, but the configuration file has been changed) and create a Prototype block. The contents of Prototypes are chunkloaded while the Prototype block itself is. There are a finite number of Prototypes that can be created (500), after which the Prototyping Table will refuse to produce any more. Slots can freed up by placing an unwanted Prototype in the slot in the Prototyping Table with a recycling icon to destroy the Prototype, free up a slot, and return the copshowium ingots required to make it. Destroying the item in any way other than the recycle slot will NOT free up a slot. The slots are shared between all members of a server. There are certain blocks which are blacklisted from being part of a Prototype: other Prototype blocks (no nesting), Large Gears (a multiblock), Portals, and a few others. Things can be added to/removed from this list in the config (DO NOT allow nesting Prototypes or inserting Large Gears though). It is recommended that server owners/pack makers blacklist any multiblocks or ways of teleporting items/players/fluids into or out of the Prototype. 
lore.prototyping.device=Using prototyping it is possible to compact large, complicated builds into a single block space for use in special Crossroads devices (by default they can be placed and used as parts of builds, but the configuration file has been changed). In order to produce a Prototype, you need a Prototyping Table. Place it down somewhere. It affects a 16x16x16 cube starting at its position plus 1 in each coordinate and ending at its position plus 16 in each coordinate (meaning the table in the lower corner of the cube). It is suggested that the entire area it affects be confined to 1 chunk for reasons that will become apparent with fields later on. A Prototype (the compacted design) can have 6 inputs/outputs (one per side of the block), and only certain things can go in/out of the Prototype (selected during construction). Ratiator signals, magic beams, heat, and rotary connections are the only things that can go in or out. Inside the design area (the 16x16x16 cube) you can build a system that will be copied into the finished Prototype. When building the design, assume there are solids walls, a ceiling, and a floor. Inputs and outputs are designated with Prototype Ports. The interface for a Prototype Port allows you to select what can travel through it, and whether it is an input or output. Rotary connections (connecting gears inside and outside the Prototype) and heat go in both directions, while Ratiator signals and beams can only go in OR out of 1 port. In refers to into the Prototype, out refers to outside the Prototype. In the port interface, select a side. This will be the side of the port that connects to the device containing the Prototype. It should be noted that beams and Ratiator signals to not pass through on there going into the Prototype, something must be connected. That is to say, for a Ratiator signal to go through, a Ratiator must be facing out of (reading) the output end. For beams to go through, the output side must be adjacent to something that can receive beams (such as an Arcane Reflector), as otherwise the beam will not go through. There can be a maximum of 6 ports, and only 1 port per side (additional ports are ignored). To create the Prototype after building a design (complete with ports) in the design area, go into the Prototyping Table interface, supply it with 3 copshowium ingots, and press the "Prototype" button. This will copy the design (at only the cost of the ingots) and create a Prototype block. The Prototype can be copied by placing it in the slot in the right side of the interface, along with the number of copshowium ingots required to produce it, and pressing the Prototype button to produce a duplicate. The contents of Prototypes are chunkloaded while in use. There are a finite number of Prototypes that can be created (500), after which the Prototyping Table will refuse to produce (or copy) any more. Slots can freed up by placing an unwanted Prototype in the slot in the Prototyping Table with a recycling icon to destroy the Prototype, free up a slot, and return the copshowium ingots required to make it. Destroying the item in any way other than the recycle slot will NOT free up a slot. The slots are shared between all members of a server. There are certain blocks which are blacklisted from being part of a Prototype: other Prototype blocks (no nesting), Large Gears (a multiblock), Portals, and a few others. Things can be added to/removed from this list in the config (DO NOT allow nesting Prototypes or inserting Large Gears though). It is recommended that server owners/pack makers blacklist any multiblocks or ways of teleporting items/players/fluids into or out of the Prototype. 
lore.prototyping.pistol=There are a few devices which can have a Prototype socketed into them and are controlled by it. For those devices, a Prototype is inserted by crafting it with the device, and removed (and returned) by placing the device alone in the crafting grid. The devices which use a Prototype can be configured to accept magic from a Beam Cage. The devices will have specific requirements for the contained Prototype (but will still accept a Prototype that violates a requirement, but just disable the feature that uses that requirement). There should be a Magic Input port on the East side, and if there is than the drained magic from a Beam Cage will be inserted into that port every 5 ticks. There should be a Magic Output port on the West side, and magic sent into it will return to a held Beam Cage (unless otherwise specified). Other requirements vary based on the device. The contained Prototype will be chunkloaded while the device is held. The first such device is the Prototyped Pistol. It is a weapon that fires iron nuggets as bullets. It needs a Redstone Input port on the South side and a Rotary port on the Up side, which will connect to a single internal gear of I=10. When the pistol is not loaded, shift-right click with it to load an iron nugget from your inventory. While it is loaded, hold down right mouse for 15 ticks (3/4 of a second), after which it will be ABLE to fire. During those 15 ticks, and until it fires, any beam inserted into the West Magic Output port will be lost (design systems to optimize around this). It will fire the first tick after those 15 ticks have elapsed that the internal gear has a speed greater than 0. The projectile will move with a speed of √(2ω/(mass of the bullet)) blocks/second. The mass of the bullet is .035kg. The bullet will do damage of (initial bullet speed)/20 points. As there is no upper limit on speed, depending on design quality a bullet might do no damage or 1-shot the enderdragon. The Prototyped Pistol has 1 other ability: If a beam was sent through the West Magic Output port within the 5 ticks before the bullet was fired (AKA beam was received what is considered simultaneously for the magic system) then the bullet will do the effect of the beam where it hits, whether it hits a block or an entity. As some beam effects can be quite deadly, this can be quite powerful. While right-mouse is held, the South Redstone In port will have a signal strength of 2, or if the player is sneaking, 1, when read by Ratiator.
lore.fields.name=Temporal Fields
lore.fields=Using Temporal Fields (or just fields for short) it is possible to manipulate the rate at which time flows for entities in a certain area, or even stop time in an area entirely. However, a single mistake could have disastrous consequences. In order to start using fields within a chunk, the chunk has to be unlocked using a Chunk Unlocker. Place it anywhere inside the chunk, and send a continuous beam of the TIME element into the top. The beam needs to be maintained for 8 seconds before the chunk is unlocked. The chunk will remain unlocked only while the Chunk Unlocker receives a TIME beam. Do not use multiple Chunk Unlockers in the same chunk, or they will interfere with each other. In order to work with fields, it is highly recommended to have Modular Goggles with an Emerald lens (to see Rate fields) and a Ruby lens (to see Flux fields). Each unlocked chunk is subdivided in 64 sections, in an 8x8 grid of 'Nodes', each of which is 2x(bedrock to sky height)x2 blocks. Each node has 2 values: Flux and Rate, which are both 8 by default, are always whole numbers, and can be no higher than 128. The rate at which time flows for entities in a node is (Rate)/8 speed, so the default Rate of 8 would give (8/8=1) times speed. The amount of Rate and Flux in a node can actually be seen by wearing the Goggles as mentioned earlier. Rate will be rendered in green, and Flux is rendered in red. Depending on the configuration settings, they will either appear are translucent lines connecting nodes or as translucent quadrilaterals with each corner being a node. The height of the lines/corners shows the amount of Flux/Rate, with feet level being 0 and waist height being 8 (2 blocks high is 16, etc.). Both Rate and Flux can be manipulated with machines, and are recalculated in a cycle every 5 ticks. There are important rules governing Rate and Flux: Rate returns to 8 unless controlled externally, with each influencing device pushing it up or down away from the resting point of 8. Remove all devices changing it and it will return to 8 next cycle. Flux does not return to 8 on its own, and if increased by 3 to 11 one cycle, and then next cycle 2 is added, it will go to 13 instead of 10. It also changes randomly when it isn't equal to 8: each cycle it changes by a random amount from 0 to ((current flux - 8)/8), with the upper bound rounded away from 0. If flux is less than 8, than each cycle it has a chance to decrease by 1. If it were, for example, 18 then every cycle it has a chance to increase from 1 to 2. At exactly 8, it doesn't change randomly. Every time the Rate in a node changes, flux in that node increases (even if rate decreased) by |ΔRate/2| (Δ means change in). If Flux reaches (or would exceed) 128, a flux disaster occurs in the chunk and the chunk will become locked again (so a Chunk Unlocker will need another 8 seconds to unlock it). There are several flux disasters, all of them extremely unpleasant and destructive (all of them can be disabled in the configuration file). They range from turning everything in the chunk to air, to a small explosion. It should be noted that every time a chunk is unlocked, the Rate and Flux in the contained nodes resets to 8. Normally, neither Flux nor Rate can reach 0, though under special conditions Rate can hit 0 (stopping time in the node). If the Rate in a node exceeds the Flux in the node, then Rate will go to 0 and what is effectively a death spiral will start, which can only be stopped by locking the chunk (by no longer inserting TIME into the Chunk Unlocker) before it is too late. During this death spiral (which is the only time that Rate = 0), Rate is locked at 0, Flux will no longer change randomly, Flux will no longer be directly increased or decreased by machines, and Flux will increase by 32 each cycle (eventually hitting 128). The speed at which Flux increases during a death spiral CAN be slowed. Define the Flux Force as amount machines would change Flux by if it were not a death spiral each cycle (so if normally the machine setup in a node would decrease Flux by 7 each cycle, Flux Force is -7, and increasing makes it a positive number). The actual speed that Flux increases during a death spiral is not 32 per cycle, but 32*(2^(Flux Force)), with a minimum increase of 1 per cycle. This means that will a downwards Flux Force of 5 or more, Flux will only increase during a death spiral by 1 each cycle. A positive Flux Force would speed up the increase, however. This all means that if you want to stop time, it can only be temporary, and you have to prevent a Flux Disaster while stopping time, the chunk has to be re-locked before it is too late. There are 3 machines involved in manipulating the Rate and Flux. First, the Rate Reader Axis: It acts identically to a Redstone Master Axis, except instead of setting a speed equal to the received signal strength, the speed equals (Flux)*π/16, or 0 if the chunk is locked. A machine called a Flux Manipulator can apply a Flux Force in the node it is in, based on the angle rotated by a gear attached to the top in the last 5 ticks (the duration of a cycle). The Flux Force it applies = θ*16/π, or 1 revolution applies a Flux Force of 32. The direction rotated controls whether the Flux Force is + or -. Finally, the Rate Manipulator applies a Rate Force (like a Flux Force, but for Rate, and of course it only lasts as long as it is applied) based on the SPEED of a gear attached to the top (not the angle rotated). Rate Force=ω*16. Fields do not interact through Prototypes (field setups inside Prototypes do not affect the outside world, and vice-versa). If Flux hits 128 inside of a Workspace Dimension or Prototype, there is no Flux Disaster (though the chunk still gets re-locked). It is therefore recommended to test field setups in a Workspace Dimension. A few tips for making a fields setup: As Flux always needs to be >= Rate (unless the goal is to stop time), even though increasing Rate also increases Flux, it is only by 1/2 the ΔRate so the Flux should be increased beforehand. Also, as Flux changes randomly when not equal to 8, some sort of system to measure Flux and account for the random change should be built. 
lore.watch.name=Prototyped Watch
lore.watch=The Prototyped Watch is a multi-function item which, like the Prototyped Pistol, requires a socketed Prototype to function. In addition to the standard Magic ports, it should also have a Redstone In port on the South side, and optionally a Rotary port on the Up side. Unlike all other things involving Prototypes, fields generated within the Watch's socketed Prototype will affect entities in the outside world while the Watch is held. The Watch's Prototype is confined to 1 chunk on the inside, so field setups inside should take that into account. If there is a field inside the Watch and a field outsid the Watch affecting the same entity, the two speed multipliers are multiplied. Neither of the fields themselves are effected. The nodes within the Watch do not directly correspond to those outside, which is to say that the North-Eastern most node inside the Watch does not necessarily impact what would the be North-Eastern most node of the chunk the player is standing in. Instead, the Watch effects time around it as if the player was standing in the center of the Watch's node which is 4th from the North-West. (For example: an entity 4 blocks south of the player is 2 nodes to the South, so they are affected by the node inside the Watch which is 6th from the North and 4th from the West). While holding the Watch and the right-mouse button is held, the South Redstone In port will have a signal strength of 2, or if the player is sneaking, 1, when read by Ratiator. The Rotary Up port allows control of the needle on the Watch's item icon. The needle will point in the same angle as the internal gear (the needle can only point in 8 directions, so it shows the closest one). This can be used to do everything from show a countdown to making the display for a basic calculator. 


#Technician's Manual

#The Basics
info.first_read=§r§rThere are TWO versions of this guide book. They both contain the same information, and either one should be sufficient. The two versions are the Mysterious Journal and the Technician's Manual. The Mysterious Journal contains lore, and multiple characters. The Technician's Manual is lore free, and only contains information. The two versions can be crafted into one another in the crafting grid. The Technician's Manual is recommended for people who simply want information, the Mysterious Journal is a more interesting (and often humorous) read that still provides information. It should be noted that there is some key information NOT MENTIONED in the Technician's Manual. Specifically, there are several secret features that are hinted at in the Mysterious Journal through one of the characters in the book. There is NO MENTION of these features in the Technician's Manual. The Technician's Manual will often give real life scientific context to concepts used in Crossroads (and note where Crossroads diverges from real life).
info.intro.pre_recipe=§r§rCrossroads is a tech & magic mod. The goal of Crossroads is two fold: to add challenges to automate (useful machines with difficult requirements) and tools to automate with (redstone integration, item routing/sorting, block breaking, etc.). A new copy of the Mysterious Journal can be made like so:
info.intro.post_recipe=§r§rEverything in this mod can be automated with only vanilla and Crossroads. Tech is for early and mid game, and the magic part of the mod is available in the later game. Later on you will be able to choose between three paths, Technomancy, Alchemy, and Witchcraft, at which point you will unlock new features and a new section to the journal. However, Witchcraft and Alchemy are NYI.
info.ores.native_copper=§r§rCrossroads adds 4 different ores. Native Copper is very common, but is only found between y=50 & y=70. When broken, it gives 3 copper nuggets.
info.ores.copper=§r§rNormal Copper ore is also very common, and is only found below y=30. However, you'll need infrastructure to make it into ingots, and until you have the infrastructure the ores are useless.
info.ores.tin=§r§rTin ore is about as rare as gold, and is only found below y=30. It can be smelted into a tin ingot. Mine any that you find.
info.ores.ruby=§r§rRuby ore is very rare, and is only found mixed in with quartz ore in the nether. It's only useful for magic.
info.ores.bronze=§r§rCopper and tin can be made into blocks and nuggets with the normal recipe, and rubies can be made into blocks when crafted in a 2x2. Also, copper and tin can be combined to make bronze.
info.ores.salt=§r§rSalt isn't found naturally, but it is created later on. It can be turned into blocks that fall like sand. The Salt Block kills plants nearby, turning grass into coarse dirt and plants into dead bushes. Creepers are considered a type of plant. Salt also shrivels up slimes into slimeballs, with the number of slimeballs being based on slime size.
info.energy=§r§rBefore you can start using technology, you need to understand the power system. There are three main ways to transmit energy: Heat, Rotary, and Steam. Energy can be converted between the three forms in certain machines. Heat can be turned to steam with a Boiler, and steam can be turned back to heat with a Radiator, or converted to rotary with a Turbine. As you can see, once energy is converted to rotary form, you cannot change it back to heat. How exactly the energy is converted will be covered in later entries. A quick overview of each form of energy is that heat is simple, lossy, slow, and expensive to transfer, and is the main form of energy that you will generate. Steam is simple, lossless, and quick to transfer (making it ideal for transferring energy), and rotary is expensive, instant, and complicated to transfer, and depending on how well you design your system could be very lossy or nearly lossless. Rotary is also the main type of energy you will be using for machines.
info.heat.name=Basics of Heat
info.heat.start=§r§rThe most basic form of energy is heat. Note that in this mod, realism was traded away for playability. Heat is transmitted with heat cables. Heat cables average their temperature with that of things around them. There are several types of insulator that can be used for heat cables. 
info.heat.insulator=The insulator determines 3 things: the rate of heat loss, the melting temperature of the cable, and what the cable does when it melts. A loss of 0.2 means the cable temperature changes by 0.2°C towards the ambient temperature each tick. The insulators are Wool, which burns at 300°C, and has a loss of .25, Slime, which turns into a living slime at 500°C, and has a loss of .2, Ice which melts at 0°C, and is at -10°C when first placed, but has the smallest loss of .001. Finally, there is Obsidian, which melts at 2000°C, and has a loss of .015. 
info.heat.insulator_effect_disable=The insulator determines 2 things: the rate of heat loss & melting temperature of the cable. A loss of 0.2 means the cable temperature changes by 0.2°C towards the ambient temperature each tick. The insulators are Wool, which overheats at 300°C, and has a loss of .25, Slime, which overheats at 500°C, and has a loss of .2, Ice overheats at 0°C, and is at -10°C when first placed, but has the smallest loss off .001. Finally, there is Obsidian, which overheats at 2000°C, and has a loss of .015. When a cable overheats it turns to fire. 
info.heat.end=§r§rIt should be noted that ice cables are made with packed ice instead of normal ice. Right clicking any heat cable with an iron ingot, a piece of nether quartz, or a diamond will change the texture of the cable. This change is purely visual and does not consume the item. Right clicking it with a copper ingot changes the texture back. A Thermometer measures the temperature of what you right click on. The cables are made in the same pattern as the following example:
info.heat.post_recipe=§r§rMost machines which use heat will do so at a constant rate as long as they are above a certain temperature, whether they are doing work or not. Most devices which produce heat have constant heat production while running. There are many approaches to regulating temperature so as to not melt heat cable, but a simple early game approach is to design systems that would produce more heat than is being consumed were none of the machines hot enough to use heat, but producing less heat than would be consumed with the machines drawing heat. This would cause the temperature to rise until the system is hot enough for machines to run, at which point it will stay around the correct temperature, but this has some drawbacks that can be corrected with more advanced, later game, systems. 
info.steam.pre_recipe=§r§rSteam is best explained by covering fluids in general. Most machines that need fluid can't have it bucketed in directly, and need you to pipe it in. Fluids obviously flows through pipes, made like so:
info.steam.mid_recipe=§r§rThese tubes can handle any fluid, hot or cold, and average out the pressure between themselves and stuff around them. Pressure is the amount of liquid divided by the amount it can store. Most machines can only accept or output fluids though, so pipes don't average with those, they just insert/extract. There are also tanks, which store 20 buckets, which can be bucketed in and out of them directly. They average their pressure with tubes, and keep their contents when broken. A tank can be emptied by placing it in the crafting grid. They're made like so:
info.steam.pre_boiler_recipe=§r§rComparators can measure how full a tank is. Steam is just another fluid, and it's only special because it's great for moving energy. Heat can be converted to steam with boilers (more on that later), and steam can be converted back to heat or rotary energy. Also, it flows pretty quickly with no loss, and the tubes don't melt or anything like that. A boiler is made like so:
info.steam.boiler=§r§rA Steam Boiler is a bit more complicated than it sounds. Heat goes in the bottom, steam comes out the top, and water goes in the side. The boiler turns water into steam once it hits 110°C. One bucket of steam uses %1$f°C and 1000mB of water to create , and 10 pieces of salt are created. Salt can be pulled out the bottom, and if the boiler gets full of salt it stops working. Because salt needs to be hoppered out the bottom and heat goes in the bottom, you can't automate the boiler YET. When you use steam to make rotary energy or heat, you get distilled water back instead of normal water. Distilled water can also be used to make steam, and if you use distilled water no salt is created, making the boiler automatable. Also, the boiler only has to be heated to 100°C, and only uses %2$f°C per bucket, which is how much heat you can get out of a bucket of steam. You can measure the fluid pressure in something with a fluid gauge, made like so:
info.rotary=§r§rThe most complicated energy system in rotary. Rotary energy is carried by gears and axles. There are small gears, with a radius of .5 blocks, and large gears, with a radius of 1.5 blocks (they are 3x3). 6 small gears can fit in one blockspace, one on each side. Small gears require something solid to attach to. They can connect around corners and to adjacent gears. They can connect axially to what they are attached to. Large gears do not need a solid support, and only 1 can fit into a blockspace. They connect in the same way small gears do. Axles connect two things together axially, for example connecting a small gear on one end to a large gear, a machine, or another axle on the other end. Every system of rotary power needs 1 Master Axis. Additional Master Axes have no effect. There are special Master Axis variants later on. Most (but not all) rotary machines have an inner gear that must be connected to axially. The most complicated part of rotary systems is the formulas controlling energy. Each part of a rotary network, (except the Master Axis) has a moment of inertia, I. The real formula for I involves calculus, so Crossroads uses an approximate formula that is much simpler: I=mr²/2 (mass times radius squared divided by two). The real formula takes the shape of the gear into account, but this is a good approximation for a gear shape. I is the rotary equivalent of mass. The following formulas use radians (θ), a measure of angle like degrees. There are 2π radians in a circle. ω, the speed of a gear, is in radians per second. The energy of a gear, E, is E=Iω²/2. Each tick, all the energy in a network is redistributed. The rule is as follows: each gear in a network has a "Rotation Ratio", R (The Crossroads Rotation Ratio is 1/(real life gear ratio)). Define the gear on the Master Axis as having an R of 1. For each gear, find how many times it would rotate if the starting gear turned once. This is the gear's Rotation Ratio. For each gear, find IR². Sum the IR² values. Each gear will have E=sum(E)IR²/sum(IR²) each time energy is redistributed. If you create a network where a gear would have 2 (or more) different R values at once (be it by a direction conflict or some bad design with axles) nothing can spin and all energy is instantly lost. There is also energy loss over time for all gear networks. (Note from the mod author: The Crossroads loss equations are nothing like real world loss, which are substantially more complicated.) Each tick, every gear loses a certain %% of its energy. The percentage lost increases with speed. (Energy lost)=E[1-1.001^-ω]. The device for measuring gears is the Speedometer, which measures speed and energy. The Hand Crank allows you to add energy to a gear with a right click. Right clicking adds energy clockwise, shift right clicking counter-clockwise. Holding down the button is best. It is not very effective, so it is recommended to switch to automation as soon as possible. It is recommended to combine a Speedometer, Thermometer, and Fluid Gauge into an Omnimeter, which combines all of their functions and more.
info.copper=§r§rIn order that the instructions on processing copper properly are not spread thinly throughout various entries, in this entry I will explain the basics of copper processing. I will also include an example setup, which while certainly not the best, will work. Native copper ore is found commonly near the surface, and drops 3 copper nuggets when mined. Normal copper ore is also very common, and is only found deeper down. Because you will need a lot of copper, it is imperative that you learn to process normal copper ore. It cannot be smelted in a normal furnace. First it must be ground in a Grindstone into 2 copper dust. Then the dust must be melted down in a Heating Crucible into molten copper. Finally, molten copper must be run through a Fluid Cooling Chamber to cool it into ingots. When all's said and done, one copper ore will be enough for two copper ingots. An example setup would be to have a Steam Boiler heated by an Insulated Heat Exchanger (placed directly below it). The Steam Boiler produces steam, which powers a Steam Turbine making rotary energy. The Steam Turbine creates steam and distilled water, with the distilled water going back to the Steam Boiler and the excess steam being fed back into the Steam Turbine. The Insulated Heat Exchanger is heated via flowing lava underneath, which turns to cobblestone when heat is produced. The cobblestone is broken by a Rotary Drill powered by the Steam Turbine, making room for more lava to flow. The Steam Turbine also powers a Grindstone producing copper dust and sand, and Sorting Hoppers are used to separate out the sand. The copper dust goes into a Heating Crucible, which melts it down into molten copper. The Heating Crucible is heated by the Insulated Heat Exchanger mentioned earlier through obsidian insulated heat cables, but so that the cables don't overheat, they also go past the Heating Crucible into a normal Heat Exchanger to dump heat. The molten copper goes into a Fluid Cooling Chamber, where it is turned into ingots. The Fluid Cooling Chamber dumps heat through a cable into a normal Heat Exchanger. Included is a picture of such a setup.
info.intro_path=Introduction to Paths
info.intro_path.start=§r§rBefore you read this section, you should have advanced well into magic. There are 3 directions you can go: Technomancy, Alchemy, and Witchcraft. (Alchemy and Witchcraft are NYI, so only 1 way you can go currently). In order to go down a path, you need to unlock it. This will unlock a new section to the journal, and the recipes for the new items. 
info.intro_path.locked=However, the current configuration settings mean you can only go down one path, which will lock you out of the other two. 
info.intro_path.continue=In order to unlock a path and then craft the relevant items, you need to make a Detailed Crafter. It functions like a normal crafting table, except that it can unlock the paths and craft items from them. To unlock Technomancy, discover the TIME element. Then place a bronze gear in each of the 9 slots of any Detailed Crafter (consuming the gears). A brief overview of each of the 3 paths is as follows: Technomancy is the hardest path, balanced around the ability to come up with convoluted designs. The simplest task in Technomancy is more complicated than some of the most complicated you have faced so far. However, it provides the tools and devices to make automation a lot easier, and will allow you to greatly improve previous setups. It is also the most powerful, themed around the manipulation of time. Alchemy (NYI) will be themed around the manipulation of reality. It will be balanced around experimentation, as many aspects of Alchemy will be randomised based on world seed, and the player will have to discover and test things on their own. Alchemy will allow the changing of the world in huge areas at a time, and the creation of custom materials. Witchcraft (NYI) will be themed around the manipulation of void. None of the three paths will have overlapping content, so while in theory Technomancy is the most powerful and Alchemy the second most powerful, each path will have unique things only that path can do. There is a cheaper recipe for the Detailed Crafter once any path has been unlocked. 

#Heat Machines
info.fuel_heater=Fuel Heater
info.fuel_heater.text=§r§rThe simplest way to produce heat is with a Fuel Heater. It burns any furnace fuel with the same duration as a furnace would, producing 1°C/t while doing so. There is a heat connection on the top which can transport heat to something directly above it without a cable, or a heat cable can be connected to the top. 
info.heating_chamber=Heating Chamber
info.heating_chamber.text=§r§rThe Heating Chamber is a heat powered furnace, which is faster than a regular furnace. While above 200°C it consumes -2°C/t, and while work towards cooking an item. It takes 50 ticks of being above 200°C (which do not need to be consecutive) to cook one item. 
info.heat_exchanger=Heat Exchanger
info.heat_exchanger.text=§r§rThe Heat Exchanger serves 2 purposes: to act as a heat sync and to provide a way of generating heat (or decreasing temperature below ambient). The Heat Exchanger has a heat loss of 10°C/t. Also, a Heat Exchanger can perform certain "recipes" with blocks directly below it, with some conversions producing heat while the Heat Exchanger is below a certain temperature, and others consuming heat while the Heat Exchanger is above a certain temperature. The purpose of these "recipes" isn't the blocks created, but the temperature change. The temperature change is not immediate, but is applied over time at 25°C/t until the full temperature change has been applied. This means that a Heat Exchanged, kept supplied with certain blocks directly below it, is a constant 25°C/t source or cooler. The conversions are lava -> cobblestone producing 1000°C when below 3000°C (the lava does not need to be a source block); fire -> air producing 300°C when below 2000°C; magma block -> netherrack producing 500°C when below 2000°C; snow block -> water cooling by 50°C when above -20°C; ice -> water cooling by 70°C when above -50°C; packed ice -> water cooling by 140°C when above -100°C. There is also an Insulated Heat Exchanged, which functions indentically to a normal Heat Exchanger except it does not have a passive heat loss of 10°C/t (making it ideal for doing conversions but useless as a heat sync). 
info.heating_crucible=Heating Crucible
info.heating_crucible.text=§r§rA Heating Crucible can do two things. It can either heat cobblestone into lava or ground copper into molten copper when heated above 1000°C. Insert items through a hopper or other automated method into the top. Pipe the fluid out the sides. Heat it through the bottom. It consumes a constant 10°C/t while above 1000°C whether running or not. While it can run at any temperature above 1000°C, it is 5 times as fast at 1500°C and above. Every operation creates 200mB of lava or 144mB of molten copper.
info.fluid_cooling=Fluid Cooling Chamber
info.fluid_cooling.text=§r§rThe Fluid Cooling Chamber is the counterpart to the Heating Crucible in that it can cool liquids to produce items. Extract items out the bottom, put fluid in the side, and connect heat cables to the top. When the Fluid Cooling Chamber cools a liquid it creates heat, and if the machine gets above a certain temperature it stops working. It can turn a bucket of lava into obsidian when below 1000°C, adding 500°C per craft, it can turn 144mB of molten copper into a copper ingot when below 1000°C, adding 100°C per craft, it can turn water into ice when below -10°C, adding 1°C per craft, and it can turn distilled water into packed ice when below -20°C, adding 2°C per craft. 
info.redstone_cable=Redstone Heat Cable
info.redstone_cable.text=§r§rRedstone Heat Cables allow redstone interaction with heat. They are made by surrounding any heat cable with 8 redstone in the crafting grid. A Redstone Heat Cable functions like a normal heat cable, except it only connects to other heat cables or machines while it has a redstone signal. A comparator can also be used with a Redstone Heat Cable to measure the temperature. The equation for converting °C to redstone strength is as follows: redstone = 15 * (273 + °C) / (273 + insulator melting point). This equation rounds down. Therefore, this will never reach 15 because at that point the cable melts. 
info.salt_reactor=Salt Reactor
info.salt_reactor.text=§r§rA Salt Reactor decreases its temperature with salt and distilled water. With a piece of salt and 200mB of distilled water, the Salt Reactor decreases its temperature by 5°C and creates 200mB of normal water. It can cool by up to 5°C/t. Distilled water is inserted in the top, water comes out of side, and salt can be inserted any side. Such a device would work in real life to a lesser extent, as it would be far less effective at cooling, and would be unable to go below the freezing point of water.

#Rotary Machines
info.grindstone.pre_recipe=§r§rThe Grindstone is the first rotary powered machine you should create. Make one like so:
info.grindstone.post_recipe=§r§rThe Grindstone has an internal gear with I=1. It uses all energy from the internal gear each tick while running, so it runs faster at higher speeds (more energy in the gear each tick). Gears can be connected to it from the top. It uses 100 energy total to grind up an item. Items can be inserted into any side other than the bottom. Early on, a Hand Crank is sufficient to run a Grindstone, albeit slowly. The recipes that the Grindstone can do are as follows: Copper Ore -> 2 Copper Dust + 1 Sand, Gravel -> 1 Flint, Bone -> 5 Bone Meal, Coal Block -> 1 Gunpowder, Nether Wart Block -> 9 Netherwart, Wheat -> 3 Seeds, Pumpkin -> 8 Pumpkin Seeds, Melon (slice) -> 3 Melon Seeds, Redstone Block -> 9 Redstone Dust, Cobblestone -> 1 Sand, Stone -> 1 Gravel. Note that the only ore that the Grindstone works on is copper.
info.item_chute.pre_recipe=§r§rItem Chutes simplify transferring items vertically at the cost of rotary power. There are two parts to a chute: the Item Chute itself and the Item Ports. They are made like so:
info.item_chute.post_recipe=§r§rTo use Item Chutes, place down a Chute Port where you want to insert items into the chute automatically. Insert items into the large hole in the port. Put a column of normal Item Chutes from the bottom port up to one block below where you want to get the items out. Put a second Chute Port on top of the pillar of Item Chutes. Items will be dropped out of the large hole in the top Item Port. Provide the bottom Item Port energy with a gear attached to the small axle hole in the side. Only the bottom Item Port needs power. The Chute has an internal gear of I=8, and uses .5 energy per item transfered. If there is an inventory in the blockspace the top Item Chute Port points into, items will be inserted into the inventory instead, and will stop outputting items once it fills up. 
info.drill.pre_recipe=§r§rA Rotary Drill is a block that, when placed down and provided with rotary power, will break blocks and damage mobs in front of it. Make two like so:
info.drill.post_recipe=§r§rThe Rotary Drill draws .5 energy from an internal gear every tick, whether it is doing work or not. The internal gear has an I=50. The Rotary Drill doesn't use any extra power when doing work. For breaking blocks, it requires a speed of at least .1 times the hardness of the block. For example, cobblestone has a hardness of 3, so a speed of .3 is required. Obsidian on the other hand has a hardness of 50, so to break obsidian the drill has a minimum speed of 5. When damaging mobs, there is no minimum speed, but more speed means more damage. It deals (10 * speed) damage, so a speed of 5 deals 50 damage. It deals damage or breaks blocks every half-second. 
info.toggle_gear.pre_recipe=§r§rThe Toggle Gear allows you to connect and disconnect it from other gears with redstone. They are available for all gear materials, and are made like so:
info.toggle_gear.post_recipe=§r§rThey will only connect while they have a redstone signal, so they can be used to split a gear system into two parts (though for both parts to function, both sides need a Master Axis) or to disconnect a machine. Only one can be fit into a blockspace, and it can only be placed on the ground, not walls or ceilings. It doesn't need to be on a solid block, however. A comparator can also be used to measure the energy of a Toggle Gear. The equation for signal strength is (signal = 15 * speed^2 / 2) rounded down, and limited at 15. A Ratiator (part of the magic system) uses the formula (signal = |speed|). Even if a Toggle Gear does not have a redstone signal, it can still interact with Axles or an attached Master Axis.

#Fluid Machines
info.rotary_pump=§r§rThe Rotary Pump draws liquids from the world into pipes. It has an internal gear of I=8. Using 200 energy from the internal gear, it will draw a fluid source below it into itself, and the fluid can be piped out the sides. It can only run if the internal gear has at least 1 full unit of energy, and is spinning clockwise. Due to it only draining from source block directly under it, it is most likely only useful for water.
info.steam_turbine=§r§rInstead of using rotary energy to pump fluids, a Steam Turbine creates rotary energy when steam moves through it. When steam is inserted into the bottom, it is converted to distilled water and rotary energy. If the distilled water tank fills up, the Steam Turbine stops working. The distilled water comes out the sides. Rotary energy is output to a gear on top of the Steam Turbine. One bucket of steam, fully processed into rotary energy, produces %1$f units of energy.
info.radiator=§r§rA Radiator converts steam into heat. Insert steam through the bottom and it will be fully converted to distilled water and heat. One bucket of steam produces %1$f°C of heat. Distilled water comes out the top and heat cables can be connected to the sides.
info.liquid_fat=§r§rFood can be liquefied to increase convenience and efficiency. The first part is making food into liquid fat with a Fat Collector. When given heat from the bottom and food is inserted into the top, it produces liquid fat, which can be piped out the side. The conversion rate of food value (saturation + hunger) to liquid fat is 1 value = %1$dmB of liquid fat. However, the exact temperature of the Fat Collector matters. Below 100°C it does nothing, above 200°C it burns up all fat produced, between 140°C and 160°C is optimal, producing 1.2 times as much liquid fat from food as the normal conversion. From 100°C to 140°C and from 160°C to 200°C it is less efficient, producing .8 as much fat from food as the normal conversion. The Fat Collector uses .8°C per value of the food it converts to liquid fat. Once you get some of this liquid fat, there is another machine that turns it into food that has controllable saturation and hunger. The Fat Congealer uses rotary energy from a gear on top of it, and uses liquid fat piped in the side. The exact speed and energy of the gear matters for this machine, as they control the hunger and saturation of the food created. The value of the food created will be equal to (gear energy / 10). The saturation of the food will be equal to the (value * speed / 2). The hunger restored is of course (value - saturation). The hunger and saturation of the food produced is capped at 20. The machine uses 1 energy per food produced. The food produced is dropped as an item from the bottom of the machine. You can use a hopper to catch it. The Fat Congealer uses an amount of liquid fat based on the value of the food and the conversion ratio mentioned earlier. An example of the math on the Fat Congealer is that a gear on top of it with an energy of 80 and a speed of 1 would produce food with a hunger and saturation value of 4, and would use 800mb of liquid fat.
info.fat_feeder=§r§rThe Fat Feeder uses liquid fat to feed players within a certain range. In order to operate, there needs to be a gear (or Axle) on both the top and bottom of the Fat Feeder. Both gears need a non-zero speed. The radius of the Fat Feeder's operation is equal to ((top gear speed) / (bottom gear speed)), rounded down. The direction of the two gears does not matter. The Fat Feeder consumes liquid fat (inserted via the sides) to refill the hunger and saturation of players within range. As with other machines, %1$dmB of fat equals 1 value. For every value that the Fat Feeder feeds to nearby players, 1 energy will be moved from the top gear to the bottom gear, always in the direction to decrease the top gear's speed and increase the bottom gear's speed. While there are many ways to automate this machine, one decent way is to use Axles. Of course that is just a suggestion.
info.redstone_tube=§r§rThe Redstone Fluid Tube only allows fluid to flow through it when it has a redstone signal.
info.fluid_splitter.name=Fluid Splitter
info.fluid_splitter=§r§rThere are two variants of Fluid Splitter: The Basic Fluid Splitter and Redstone Fluid Splitter. Both accept fluid from the sides & output it to the top and bottom. The Basic Fluid Splitter will output 1/2 of the inserted fluids to the top and 1/2 to the bottom. The Redstone Fluid Splitter splits fluids based on a redstone signal. (Signal Strength)/15 of the fluid goes to the bottom, and the rest goes out the top. A rule of thumb to remember which way redstone redirects fluid is that if you were to place a lever on a Redstone Fluid Splitter, the fluid would exit in the direction the lever points. 
info.water_centrifuge=§r§rThe Water Centrifuge is an automatable way to produce salt and distilled water. It has 4 fluid ports, one on each side. The red ports output distilled water, and the orange ports accept water. Salt can be removed from the bottom. A gear needs to be on top of it. The Water Centrifuge itself takes no energy to run, however it still has requirements. The gear on top needs to reach .5 speed for the machine to produce one batch of salt and distilled water. For the next batch, the speed needs to be .5 in the opposite direction. Basically, the direction of the gear on top needs to keep reversing, and each time it needs to reach a speed of at least .5. One batch uses 100mB of water, and produces 100mB of distilled water and one unit of salt.

#Miscellanous
info.brazier=§r§rA Brazier can burn one of two things: charcoal or salt. Put either one in with a right click or automation. One item burns for 5 minutes. While an item is burning, particles come out of the Brazier and it emits light level 15. Also, while burning salt there is an additional effect. No witches can spawn within 64 blocks of a Brazier burning salt.
info.item_sorting=§r§rThis section will cover two devices: the Sorting Hopper and the Slotted Chest. On their own, neither of these things are so incredible, but when combined they are very convenient. The Sorting Hopper functions almost identically to a normal hopper but for a subtle difference that has huge ramifications. While a normal hopper processes extracting items after inserting them, the Sorting Hopper processes extracting items before inserting them. The reason this is important is that if you make a pillar of sorting hoppers, with them all facing sideways into inventories, then items go into the top inventory first, then the second inventory, and so on. This does not occur with normal hoppers. This means you can filter items. If the top inventory can only accept sand and the middle one accepts only dirt and the bottom one takes anything, then putting dirt, sand, and gravel into the top hopper will result in all the sand going into the top inventory, all the dirt going into the middle inventory, and all the gravel going into the bottom inventory. The Slotted Chest is a chest the size of a double chest, and it has a very interesting quirk. When removing an item from a slot, it leaves a ghost item behind. You can shift click into the Slotted Chest, but only if the slot the items are going to already has the matching item. To clear a ghost item, shift click it with an empty cursor. Also, automation will respect the ghost items, will only be able to insert into a slot if it already has a match and when extracting items it always leaves a ghost item behind. This allows you to format your storage chests without fear of shift clicks or automation messing it up.
info.ob_cutting=§r§rOnce you get your first piece of obsidian, you can use it to create 4 Obsidian Cutting Kits. Simply right click one on some obsidian to insta-mine the obsidian and destroy the Obsidian Cutting Kit.
info.decorative=§r§rA Candle Lilypad is a decorative block that functions as a lilypad which emits the same amount of light as a torch (14).
info.fertile_soil=§r§rFertile Soil is an aid to farming. It has 10 variants, for wheat, carrots, potatoes, beetroot, and the 6 saplings. Crops can be planted on Fertile Soil like it was farmland, and they grow as if on hydrated farm land even without water. They also cannot be trampled. The main feature of Fertile Soil is that at random intervals, if there is nothing growing on top of it, it plants the crop corresponding to its type on itself for free. Therefore, you no longer need to replant. An important note is the sapling variants, with those it not only replants at random intervals but also whenever it gets a block update, meaning it usually replants instantly. In the following recipe, replace the wheat with the crop/sapling of the desired Fertile Soil type.
info.multi_piston=§r§rThe Multi-Piston works like a normal piston, but for a few differences. The biggest difference is that instead of extending 1 block, it extends the number of blocks equal to the strength of the redstone signal it is receiving (up to 15 blocks). It also can push up to 64 blocks at a time instead of 12, and it extends and retracts instantly. When pushing entities with slime blocks, pushing farther at once multiplies the effect. The Multi-Piston also doesn't have quasi-connectivity. To make up for this, the Multi-Piston can have redstone placed on top of it directly. The Multi-Piston has a normal and sticky variant. There is also a simpler recipe for normal pistons that is shapeless.
info.ratiator=§r§rThe Ratiator (pronounced ray-shee-ate-er) is a more advanced comparator. Note that it requires materials from the magic system. Instead of comparing two values or subtracting them, it multiplies and divides. Its two modes (changed with a right click) are multiplication and division. The symbol on the plate changes based on the mode. It multiplies (or divides) the value at the back by the largest input of its two sides. Notably, it can work with decimals or values greater than 15. The moment it outputs to redstone, however, it rounds down to an integer and caps it at 15. To take advantage of the ability to use other values, Ratiators can take input from another Ratiator directly, avoiding capping and rounding. It can measure things behind it like a comparator. Most comparator-readable things in Crossroads will be able to output decimals and numbers greater than 15 to a Ratiator, and some use different formulas for signal strength with Ratiators (In which case, the relevant entry will specify the other formula.). Shift right clicking a Ratiator with an Omnimeter displays the output.

#Magic Machines
info.basic_magic=§r§rYou should have a decent amount of infrastructure before preceding. This section is just about the concepts, how magic is made and managed will be covered separately. In the magic system, there are 4 basic elements. Each of the elements is assigned to a different color: Energy is red, Potential is green, Stability is blue, and Void is black. Void is a more advanced topic that will be covered separately. Magic is measured in discrete units. Specifically 4 whole numbers, each number refering to a different element. The power of a beam is the sum of those 4 numbers. The interesting thing about elements is what happens when you mix them. A beam could be 3 parts energy and 3 parts potential, which would make a yellow beam. The entire RGB chart is possible. Beams are assigned an element based on the color. There are a lot of elements, and you will have to discover most of them yourself (See entry on Discovering Elements). Magic travels in beams, analogous to beams of light. The thickness of the beam is proportional to the square root of the power, but if the power is >=64, it is very thin (The thickness is just visual). If a beam collides with any block that isn't specially designed to handle magic (even glass or a torch), or it goes 16 blocks without hitting something, then it does an effect at the end of the beam. The effect done is based on the element. The effects of all discovered elements are in the entry called Magical Elements. Many effects, but not all, are made stronger the more total magic is in the beam, but stop becoming more powerful above power = 64. The main use for magic are the effects of different elements. Most of the magic related machines will need a crafting ingredient called Pure Quartz. The other crystals of interest are rubies, for interacting with energy, emeralds, for interacting with potential, and diamonds, for interacting with stability. Another crafting ingredient are Lens Arrays, which are very expensive and should be used sparingly. Most magical devices add a 5 tick delay to any beams passing through them before emitting the beams again. This includes things like Arcane Reflectors and Beam Splitters.
info.elements.name=Magical Elements
info.elements.preamble=Information about the various elements will be added to this entry as you discover them. To add an element to this entry, discover it then close and re-open this entry.
info.elements.charge=CHARGE: Creates lightning wherever it hits. Turns any rock materials into redstone blocks. In a Crystalline Master Axis it adds 10 energy/tick in the + direction. 
info.elements.enchantment=ENCHANTMENT: Enchants nearby items on the ground randomly. Higher power beams increase enchanting level. Can create treasure enchants when power >= 32. 
info.elements.energy=ENERGY: Adds (power)°C/5 ticks to whatever heat devices it hits. In a Crystalline Master Axis it adds 10 energy/tick in the direction gears are currently spinning. 
info.elements.equalibrium=EQUALIBRIUM: Does nothing on its own. In a Crystalline Master Axis it reduces the change in energy each tick by 75%%. 
info.elements.expansion=EXPANSION: Places items within a range of (power) as blocks. 
info.elements.fusion=FUSION: Turns Sand -> Pure Quartz Block when power >= 16, Water -> Ice, Snow -> Ice, Distilled Water -> Packed Ice when power >= 4, Netherrack -> Nether Brick when power >= 8, Gravel -> Prismarine when power >= 8, Prismarine -> Prismarine Bricks when power >= 12, Prismarine Bricks -> Dark Prismarine when power >= 16, Cobblestone -> Stone, Stone -> Stone Bricks. 
info.elements.light=LIGHT: Converts rock materials into glowstone, and glass materials into sea lanterns. 
info.elements.no_match=NO_MATCH: This element should not be obtainable. Report to mod author. 
info.elements.potential=POTENTIAL: Grows crops faster based on power. Heals mobs within a radius of √power by power/2.
info.elements.rift=RIFT: Spawns hostile mobs with a power/64 chance (Up to a mob limit of #of players * 3 * mob limit total). Converts purpur blocks to shulkers, skeleton skulls to wither skeleton skulls, and stone to silverfish stone. 
info.elements.stability=STABILITY: Does nothing on its own. In a Crystalline Master Axis it prevents power loss. 
info.elements.time=TIME: Speeds up tile entities and random block updates based on power. EXTREMELY DANGEROUS IF MIXED WITH VOID! (Don't say you weren't warned).
info.elements.void=VOID: Destroys any block it touches. 
info.color_chart=§r§rThe main use for magic are the effects of the different elements. You will have to discover the color of the different elements yourself for the most part, but there are several things that can help you. First of all, using an Omnimeter on any block that emits beams will tell you the color and elemental makeup of the last beam that block fired. If the element is one you haven't scanned this way before, you will 'Discover' that element. That is useful for the Color Chart. The Color Chart has an informative GUI. The GUI is a color chart, and mousing over a point on the color chart tells you the RGB value of that point and the element of that point, IF you have already discovered that element with an Omnimeter. Any spots on the chart with a red X over it has an element you haven't discovered yet on it, so you should try to create a beam of that color and discover it.
info.arcane_extractor=§r§rThe Arcane Extractor is the crudest way to obtain magic. It has a front which can only be on the horizontal plane, and items can be inserted into any side with a hopper. The extractor destroys any item inserted almost instantly (1 item every 5 ticks), and produces a beam out the front side based on the item used. Most items don't make any beam, and just get consumed. The beam exists for 5 ticks, then vanishes. Feeding it items with a hopper would make a pulsating beam as the hopper cannot feed it fast enough. The items it can use are redstone dust to produce a beam with 24 energy and 36 potential, glowstone dust to produce a beam with 1 energy, 1 potential, and 1 stability, salt to produce a beam with 24 potential and 36 stability, and coal (OR charcoal) to produce a beam with 36 energy and 24 potential.
info.quartz_stabilizer=§r§rThe Quartz Stabilizer turns beam pulses into constant beams. There are two varieties, the small and the large. The Small Stabilizer needs a lens array, making it quite expensive. With Luminescent Quartz, which will be covered later, Stabilizers can be made much more cheaply. Quartz Stabilizers can face any direction when placed, and when it receives a beam from any direction other than the front it stores the magic of the beam. The Quartz Stabilizer will emit a constant beam out the front, draining the stored magic to do so. The Quartz Stabilizer has a capacity of 30 magic for the small version and 150 magic for the large one. Please note that is 30 units of magic (energy + potential + stability + void) not 30 beams. Any excess magic is lost. The emitted beam has 6 magic for the small version and 15 magic for the large version, and has the same color as the stored magic. The problem is that due to magic being measured in whole numbers and there is a limit on the output of the stabilizer, the outputted color might not exactly match the stored color. Therefore, the stabilizer is most reliable for beams that only contain one basic element, not a blended color. There is no way to make a Quartz Stabilizer hold onto its stored magic without emitting it, so it can't be used for long term magic storage on its own.
info.lens_holder=§r§rThe Lens Holder is an important tool for manipulating beams. The Lens Holder can hold certain gemstones that can be inserted/removed either with automation or a right click. The Lens Holder can hold either a diamond, ruby, emerald, or pure quartz. It can also hold a Void Crystal, but that is a more advanced topic (See the entry on Void). When a beam passes through a Lens Holder with a gem in it, the Lens Holder acts as a filter, with the magic that isn't allowed to pass through simply being lost. A diamond allows stability, a ruby energy, and an emerald potential. Pure quartz does not act as a filter, and allows any element to pass through. A word of warning, none of the gemstones can block void and if a beam passes through the Lens Holder with any void in it, the lens will be destroyed. If a beam of the LIGHT element passes through and the Lens Holder has pure quartz in it, the pure quartz turns into luminescent quartz, which is a crafting ingredient. The light element is the white color, and any color relatively close to white. The Lens Holder also interacts with comparators, emitting a signal based on the power of the beam it is outputting. The equation is redstone = (power / 3) rounded down.  A Ratiator (part of the magic system) uses the formula (signal = power). The Lens Holder is one of the few devices that does NOT add a 5 ticks delay to beams that pass through it.
info.arcane_reflector=§r§rAn Arcane Reflector is one of the basic tools for manipulating beams. It can face any direction, and when given a beam in a side that isn't the front it outputs the beam through the front. It can also blend beams by putting multiple beams into it at once. It does add a 5 tick delay, like most other magic machines.
info.beam_splitter=§r§rThe Beam Splitter takes any beam and splits it into 2 beams. Beams go in the sides, and come out the top and bottom. The two outward beams aren't the same size, but they are the same color as the input (with a margin of error, dividing whole numbers again, but no magic is lost in the end). There are two versions of the Beam Splitter, the Basic Beam Splitter and the Redstone Beam Splitter. With the Basic Beam Splitter, the two output beams are the same power. The distribution of magic between the top and bottom beams with a Redstone Beam Splitter depends on the incoming redstone signal strength. The bottom beam has (redstone strength) / 15 of the magic, and the top gets the rest.
info.crystalline_prism=§r§rThe Crystalline Prism has a front that can only be placed on the horizontal plane, and is another version of the Beam Splitter. Instead of making two beams of identical colors, it takes a beam in the back (opposite of front) and outputs up to three beams made from the input beam. A pure energy beam from the left of the front, a pure potential beam from the front, and a pure stability beam from the right of the front. Any void in the original beam is lost. Crystalline Prisms are expensive, so use them sparingly.
info.crystal_master_axis=§r§rThe Crystalline Master Axis is an alternative to a normal Master Axis. It functions identically, but for one key difference. It can accept magical beams and alter its behavior based on the element. It can only have the effect from one element active at a time. Every time it receives a beam (limit one beam/side/5 ticks), it acts differently based on the element for the next (beam power * 5) ticks. The timer does not get reset each time it receives a beam, but instead is increased. Each time it receives an element different from the previous one, it resets the timer and switches to the new element. Not all elements have an effect, but for example energy increases the total energy of the gear system by 10/tick if there is any energy to begin with, and equilibrium decreases the change in energy each tick by 75%%. An Omnimeter can measure the current element and duration in a Crystal Master Axis.
info.void=§r§rVoid is the fourth element, and very powerful. At this point, you should have gone to the End and killed the dragon. Void is pure black in color. To create void beams, fire a beam of RIFT through a Lens Holder containing a Void Crystal. This will emit a beam of pure void, of the same power as the Rift beam. On its own, the Void beam just destroys blocks it touches. It can destroy any block, even things normally indestructible. Mixing even a tiny bit of void with any other element will change the effect. Usually the new effect is the opposite of the original effect, though not always. You have to work out the exact effects on your own, but they are usually pretty easy to guess. For example, VOID-ENERGY cools things down instead of heating them up, while VOID-STABILITY makes explosions based on the power of the beam. A word of warning, if you have discovered the TIME element, DO NOT COMBINE IT WITH VOID. You have been warned. Also, the Crystalline Master Axis acts differently with beams containing Void than with beams free of Void.
info.beacon_harness=§r§rA much stronger source of magic than the Arcane Extractor is available in the form of the Beacon Harness. While running, it produces a constant beam of about power 512. The color of the beam is not constant, however, and changes over time. If you look at a Color Chart, the color of the beam produced follows the rim of the chart in a circle. It goes in a complete loop once every 30 seconds. While it can produce very powerful beams, it has a stringent set of requirements. It must be placed 2 blocks above a beacon with no obstruction in between (so beacon then airspace then harness). In the pattern the color follows, the beam emitted will always contain 2 or fewer basic elements. In order to keep it running, it needs to be supplied with the 1 basic element it isn't emitting (so if it's emitting a mixture of STABILITY and POTENTIAL, it requires pure ENERGY). Supplying it with an element it is emitting will cause it to shut down. It runs regardless of the inputted beam for the next 2 seconds after and while emitting a pure element, giving any system built to supply it a time margin for adjusting. The Beacon Harness starts in the shut down position. To turn it on, trigger it with redstone (it will keep running after the redstone turns off) and it will run after a 2 second cooldown.

#Technomancy
info.cat_technomancy.name=Technomancy
info.copshowium_chamber.name=Copshowium Creation Chamber
info.copshowium_chamber=The basic material for Technomancy is copshowium, an orange metal that can be made into blocks, nuggets, and gears. Copshowium gears have 0 mass, so they won't contain any energy while spinning, and have no loss. Their speed is determined by the Rotation Ratio and the speed of other gears. With a normal Master Axis, you can not create a gear network entirely of 0 mass gears, because there is nothing to set the speed. There are special Master Axes in Technomancy that do allow it, however (allowing for energy free networks). Copshowium is made in a Fluid Cooling chamber using 144mB of molten copshowium to make 1 ingot when below 1000°C, adding 100°C per craft. Molten copshowium can be made in 2 ways. Both require a Copshowium Creation Chamber, and one of the ways requires progressing farther into Technomancy. A Copshowium Creation Chamber can store 1296mB of fluid. Liquid can be extracted out the bottom, and both inserted and extracted through the top (so Fluid Tubes use the pressure system). The first way to make copshowium is to insert molten copper into the chamber and hit it with a time beam of power=(amount of fluid)/72, give or take 1. Using a power below this will have no effect, and a power higher than this will destroy the contained fluid to no benefit. Using the correct power will turn the molten copper into molten copshowium, with each 5mB of copper into 9mB of copshowium. Overfilling the chamber (creating > 1296mB of molten copshowium) will break the chamber. Mixing copper and copshowium in the chamber will destroy the copshowium. The second way to create copshowium is the same process, but uses distilled water instead of molten copper & requires using fields (later Technomancy concept). In order to turn distilled water into molten copshowium, when the time beam hits the chamber the node the chamber is in must be unlocked and the node will lose (distilled water content)/9 flux, so a field management system must be designed accordingly. 
info.goggles.name=Modular Goggles
info.goggles=Going forward, an Omnimeter will not be sufficient. A far superior alternative is Modular Goggles. They are a headpiece that provides no armor, but does not break. On there own, they do nothing. Lenses can be added to the goggles in an anvil with either a Ruby, Emerald, Diamond, or piece of Pure Quartz and 2 levels of experience. Multiple lenses can be added, but only one of each type. Looking at a block that can be read by an Omnimeter (and quite a few that can't be) while wearing goggles with the correct lens will cause information to be displayed (and updated every tick). A Ruby lens reads things related to heat, an Emerald lens is for rotary things, a Diamond lens for fluids, and a Pure Quartz lens for magic or the output of a Ratiator. Goggles can also provide information not shown by an Omnimeter, such as the rotation ratio of a gear just by looking at it with an Emerald lens. Certain things later on require Goggles to be measured at all. 
info.redstone_keyboard.name=Redstone Keyboard
info.redstone_keyboard=The Redstone Keyboard is a convenient way of having constant redstone signals of a specific strength. Right clicking one will open a GUI where a number can be set. Setting the value to "PI" will cause it to be set to the value of π. When measured by Ratiator, it emits a signal of the strength set in the GUI. It can also be measured by Comparator, in which case it rounds the contained value and caps it at 15. It can not be set to negative numbers. 
info.redstone_registry.name=Redstone Registry
info.redstone_registry=The Redstone Registry is similar to a Redstone Keyboard, except it has multiple preset outputs that it cycles between. It can store up to 64 values, and will emit (when measured by Ratiator or Comparator) the value it is currently at. Every time it receives a redstone signal, it emits the value that is set (rounded signal strength received) ahead of its current value, looping from the final value to the first value as necessary. If the signal it receives is equal to or greater than the number of values it has set, it resets to the first value in the list. The GUI is rather complex, and contains 5 buttons: #, +, -, ▲, ▼, as well as a bar for entering values (which are locked in by pressing enter) and an area where values are displayed. It can display up to 3 set values at a time in the GUI, and which ones are viewed is controlled with the ▲ & ▼ buttons. The top of the 3 values displayed (referred to as the focused value) is the one edited by the input bar. A new value can be added with the + button (inserted directly after the currently focused value), or the focused value can be removed from the sequence with the - button. The currently emitted value can be set to the value focused in the GUI with the # button. The currently emitted value is colored yellow in the GUI. 
info.rotary_math_devices.name=Rotary Mathematics Devices
info.rotary_math_devices=Prior to now, the rotary system has been used as little more than an energy type. In Technomancy, the rotary system is used in a far more advanced role: control. The exact speed, and in some cases the exact number of rotations performed (speed * time) will matter. For this reason, the following devices allow greater control over rotary systems. The following devices are different types of Master Axes, all of which can control a network made entirely of 0-mass gears. The Redstone Master Axis will cause the connected gear to spin with a speed equal to the strength of redstone signal received, and it can use values > 15 or with decimal points if Ratiators are used. All other connected gears have a speed based on Rotation Ratio and the speed of the first gear. In order to cause the attached gears to spin if they have non-zero mass, energy is required which can be provided by a gear on the back of the Redstone Master Axis. The Redstone Master Axis can point any direction. It is often convenient to use Redstone Master Axes in tandem with Redstone Keyboards. Any excess energy in the gear network is inserted into the energy providing gear, any required energy is drawn from it, and if there is not enough available energy then all controlled gears will stop spinning. If the gear network has 0-mass, no energy providing gear is required. The following Master Axes types set the speed of the attached gear based on the speed of other gears. Linking one of these Axes inputs to its output will destroy the Master Axes (dropping it as an item), as otherwise there would be an infinite loop. It is allowed to connect one of these Axes to its own power gear, though fairly pointless to do so. All of the following devices can only face horizontally and have an energy input on the bottom. The Addition Master Axis has 2 inputs (marked by two blue rings on the model) and an output (the top). The controlled gears will have a speed equal to the sum of the speeds of the 2 input gears. If they were to spin in opposite directions, it would be subtraction. (For those who care, the model of the Addition Axis shows a real life device called a differential). The Multiplication Master Axis has two inputs (back and top, marked by blue rings), and 1 output (the front, marked by an orange ring). The output speed is equal to the product of the two input speeds times -1. Note the fact that it multiplies the output by -1. If provided with a redstone signal, the Multiplication Axis does division instead, with (output speed)=-(back input speed)/(top input speed). Once again note that the answer is multiplied by -1. (For those who care, the Multiplication Axis model shows a complicated device of springs and continuous transmissions which, if designed for a specific set of units, could in theory multiply the speeds. However, a real device like the one in the model would have a LOT of energy loss. The model is the reason it multiplies the output by -1.). The Square Root Axis has an output speed of the square root of the input speed (with an output speed of 0 for negative inputs). The Sin and Cos Axes do the Sine and Cosine operations respectively in θ. There is no Tan Axis as tangent(θ) = sine(θ)/cosine(θ). The ArcSin and ArcCos Axes do the ArcSine (inverse sine) and ArcCosine (inverse cosine) operations respectively. The Equal Axis has two inputs (to the left and right of the output), and will output the input speed if, and only if, the two inputs have equal speed. The Greater Than Axis has two inputs on the top and back, and has an output speed equal to the back input speed if, and only if, the back input has a higher speed than the top input. The Less Than Axis has two inputs on the top and back, and has an output speed equal to the back input speed if, and only if, the back input has a lower speed than the top input. Finally, there is a much cheaper recipe for the normal Master Axis as part of Technomancy. 
info.workspace_dim.name=Personal Workspace Dimension
info.workspace_dim=It is possible to build a portal to a personal empty dimension called a "Workspace Dimension". It has no weather, mob spawns, celestial bodies, sunlight, and starts out with only a single stone brick block over the void. Each player gets there own copy that can be built in. It is highly recommended to design field (later Technomancy mechanic) systems in a Workspace Dimension, as there are no flux effects in Workspace Dimensions at all. In order to construct a portal to a Workspace Dimension, create 3 Gateway Frames. Place a Gateway Frame pointing down; The portal will be a 3x3 below this. From the Gateway Frame, go 2 blocks down, and 2 blocks to one side. Place a Gateway Frame pointing inwards. Repeat for the opposite direction. Other blocks near or inside the portal do not interfere. To activate the portal, send a RIFT beam into the top of the upper Gateway Frame. The portal opens and closes instantly, and is only open while a RIFT beam is provided. The portal will link to [0, 33, 0] in the Workspace Dimension, and links to the dimension belonging to the player who placed the top middle block of the gateway (for this reason, fake players cannot place Gateway Frames). Exiting a Workspace dimension can be done either by dying or by using an identical gateway in the Workspace Dimension. A gateway in a Workspace Dimension will by default link to [0, 0, 0] in the Overworld, but the coordinates can be changed. Attaching gears to the ends of the two side Gateway Frames (the side opposite the middle) will allow controlling the X and Z coordinates with the angle the attached gears have rotated (the gear in the north or west direction controls the X coordinate, the gear in the south or east direction controls the Z coordinate) in θ. For example, if a gear on the end of the south Gateway Frame makes 3 rotations clockwise, it increases the target Z coordinate by 6π. A gear attached to the top Gateway Frame on a side other than the top or bottom controls the Y coordinate. Closing and re-opening the gateway (such as by disabling the incoming RIFT beam temporarily) resets the target coordinates to [0, 0, 0]. Modular Goggles with an Emerald lens displays the dialed coordinates when viewing the top Gateway Frame. 
info.mech_arm.name=Mechanical Arm
info.mech_arm=The Mechanical Arm is a block that can move entities, interact with inventories to move items, place blocks, and use items. It is controlled by 3 attached gears and a redstone signal. A gear on the bottom controls θz, a gear on the east controls θb, and a gear on the west controls θt. A redstone signal is accepted on the north side. What matters to this machine is the angle rotated by the gears, not the speed. It starts out with θz = 0, θb = 17Π/36 radians, θt = Π/4 radians. The bounds for θb is [Π/6, 17Π/36], the bounds for θt is [Π/4, 3Π/4], and there are no bounds for θz. The Mechanical Arm has 2 segments of constant length, and the angle between them is controlled by the 3 θ values, as is shown by the following diagram. lower-length = 3, upper-length=5. 
info.mech_arm.post_image=From this information, the formulas for the position of the end point relative to the top center of the base are found to be: (lengthCross and θd exist to shorten the calculations) 
info.mech_arm.post_calc_1=Or, if that is illegible (you can try turning up GUI scale): lengthCross= √(lengthBase² + lengthTop² - 2lengthTop*lengthBase*cos(θt)), θd= θb + θt + arcsin(sin(θt)*lengthBase/lengthCross), x= -cos(θd)lengthCross*cos(θz), y= -sin(θd)lengthCross, z= -cos(θd)lengthCross*sin(θz). </n>If the end position is known and you want to solve for the angles required to obtain that end position, then: 
info.mech_arm.post_calc_2=Or, if that is illegible: lengthCross= √(x²+y²+z²), θt= arccos((lengthBase² + lengthTop² - lengthCross²)/(2*lengthBase*lengthTop)), θb= arcsin(y/lengthCross) + arcsin(sin(θt)lengthTop/lengthCross), θz= arctan(z/x). </n>It is recommended to make some sort of automatic calculation device if you need to do these operations a lot. In order to make the arm actually do anything other than move, a redstone signal must be applied. The exact strength matters, and values only reachable by Ratiator are required. All signal strengths are rounded to the nearest whole number. The arm has 7 different effects, activated by redstone signal, and each effect gets a direction based on the redstone signal (although many of the effects ignore the direction). A signal of 0 does nothing, a signal of 1 resets all 3 θ values of the arm to default, and any other signal does an effect. The effects are referred to by index: 0: Pickup entity, 1: Pickup block, 2: Pickup from inventory, 3: Use, 4: Deposit into inventory, 5: Drop entity, 6: Release entity with momentum, 7: Pickup one from inventory. The effect done with a redstone signal is the one where index=(redstone - 2)/6, capped at 7. The side passed to the effect is referred to by index as well: 0: down, 1: up, 2: north, 3: south, 4: west, 5: east. The side used is index=(redstone - 2)mod(6). (That is, (redstone - 2) modulus 6). The effects, in order: Pickup Entity which will cause an entity near the end of the arm to be grabbed by the arm, provided the arm has no passengers. Pickup Block will break the block at the end of the arm, and if the arm has no passengers or is carrying an item of the type dropped by the block, will pick up the block's drops. Pickup from inventory will attempt to pull out 1 stack from the inventory at the end of the arm and put it on the end of the arm (uses the direction). Use will try to right click with the held item, or if it is an ItemBlock place it in midair (uses the direction). Deposit into inventory will try to place a held stack into the inventory at the end of the arm (uses the direction). Drop Entity will cause the held entity to be dropped straight down. Release with Momentum will release the held entity, but if the arm was in the process of moving the entity will be moving as well (which means you can make a trebuchet with this). Pickup one from inventory is the same as Pickup from inventory, except instead of trying to take up to a full stack, it tries to take exactly 1 item. The arm can pass through blocks, carry item entities, players, or mobs, and interact with things requiring a right click. 
info.mech_beam_splitter.name=Mechanical Beam Splitter
info.mech_beam_splitter=A more precise variant of the Beam Splitter is the Mechanical Beam Splitter. When placed, it can face any horizontal direction. The ratio used to split incoming beams between the top and bottom is controlled by the speed of the gear attached to the direction it is facing. Ratio=ω/15, capped at 1. It rounds magic normally for the down direction, and the remainder goes up.
info.beam_cage_+_staff.name=Beam Cage & Staff
info.beam_cage_+_staff=There are several handheld devices which require magic to run. In order to power them, there is the magical equivalent of a battery: the Beam Cage. It can store 1024 each of Energy, Potential, Stability, and Void. In order to charge it, a Cage Charger is required. Right click a Cage Charger with a Beam Cage to insert the cage into the charger. Right clicking it again will remove the cage. In order to charge the cage, send a beam into the charger from any direction other than down. The components of the beam will go into the cage, with any excess magic being lost. In order to use a Beam Cage with a device, there are 4 keybinds that need to be set: Energy Control key, Potential Control key, Stability Control key, and Void Control key (which, despite the name, have nothing to do with the ctrl key on the keyboard). Suggested default values are: 'R', 'G', 'B', & 'V' respectively. Devices powered by a Beam Cage can have there magic usage configured by holding the device, along with 1 of the elemental control keys, and right clicking to increase usage of that element by 1, or shift right clicking to decrease it by 1. The settings are capped at 8. The first such device is the Beam Staff. Holding it in one hand and a Beam Cage in the other while using the Beam Staff will drain the configured usage from the cage every 5 ticks, and shoot a beam from the staff in the direction the player is looking made from the magic drawn from the Beam Cage. The beam travels farther than usual, 32 blocks, and can collide with blocks but not entities. While it can do an effect at the end (which is the purpose of the staff), it cannot insert the beam into a device such as an Arcane Reflector. 
info.prototyping.name=Prototyping
info.prototyping.default=Using prototyping it is possible to compact large, complicated builds into a single block space and copy them quickly and cheaply. In order to produce a Prototype, you need a Prototyping Table. Place it down somewhere. It affects a 16x16x16 cube starting at its position plus 1 in each coordinate and ending at its position plus 16 in each coordinate (meaning the table in the lower corner of the cube). It is suggested that the entire area it affects be confined to 1 chunk for reasons that will become apparent with fields later on. A Prototype (the compacted design) can have 6 inputs/outputs (one per side of the block), and only certain things can go in/out of the Prototype (selected during construction). Ratiator signals, magic beams, heat, and rotary connections are the only things that can go in or out. Inside the design area (the 16x16x16 cube) you can build a system that will be copied into the finished Prototype. When building the design, assume there are solids walls, a ceiling, and a floor. Inputs and outputs are designated with Prototype Ports. The interface for a Prototype Port allows you to select what can travel through it, and whether it is an input or output. Rotary connections (connecting gears inside and outside the Prototype) and heat go in both directions, while ratiator signals and beams can only go in OR out of 1 port. In refers to into the Prototype, out refers to outside the Prototype. In the port interface, select a side. This will be the side of the final Prototype that connects to this port, and the side of the port that connects to the Prototype. It should be noted that beams and Ratiator signals to not pass through on there own in either direction, something must be connected. That is to say, for a Ratiator signal to go through, a Ratiator must be facing out of (reading) the output end. For beams to go through, the output side must be adjacent to something that can receive beams (such as an Arcane Reflector), as otherwise the beam will not go through. There can be a maximum of 6 ports, and only 1 port per side (additional ports are ignored). To create the Prototype after building a design (complete with ports) in the design area, go into the Prototyping Table interface, supply it with 3 copshowium ingots, and press the "Prototype" button. This will copy the design (at only the cost of the ingots) and create a Prototype block. The Prototype can be copied by placing it in the slot in the right side of the interface, along with the number of copshowium ingots required to produce it, and pressing the Prototype button to produce a duplicate. The contents of Prototypes are chunkloaded while the Prototype block itself is. There are a finite number of Prototypes that can be created (500), after which the Prototyping Table will refuse to produce (or copy) any more. Slots can freed up by placing an unwanted Prototype in the slot in the Prototyping Table with a recycling icon to destroy the Prototype, free up a slot, and return the copshowium ingots required to make it. Destroying the item in any way other than the recycle slot will NOT free up a slot. The slots are shared between all members of a server. There are certain blocks which are blacklisted from being part of a Prototype: other Prototype blocks (no nesting), Large Gears (a multiblock), Portals, and a few others. Things can be added to/removed from this list in the config (DO NOT allow nesting Prototypes or inserting Large Gears though). It is recommended that server owners/pack makers blacklist any multiblocks or ways of teleporting items/players/fluids into or out of the Prototype. 
info.prototyping.consume=Using prototyping it is possible to compact large, complicated builds into a single block space. In order to produce a Prototype, you need a Prototyping Table. Place it down somewhere. It affects a 16x16x16 cube starting at its position plus 1 in each coordinate and ending at its position plus 16 in each coordinate (meaning the table in the lower corner of the cube). It is suggested that the entire area it affects be confined to 1 chunk for reasons that will become apparent with fields later on. A Prototype (the compacted design) can have 6 inputs/outputs (one per side of the block), and only certain things can go in/out of the Prototype (selected during construction). Ratiator signals, magic beams, heat, and rotary connections are the only things that can go in or out. Inside the design area (the 16x16x16 cube) you can build a system that will be inserted into the finished Prototype. When building the design, assume there are solids walls, a ceiling, and a floor. Inputs and outputs are designated with Prototype Ports. The interface for a Prototype Port allows you to select what can travel through it, and whether it is an input or output. Rotary connections (connecting gears inside and outside the Prototype) and heat go in both directions, while ratiator signals and beams can only go in OR out of 1 port. In refers to into the Prototype, out refers to outside the Prototype. In the port interface, select a side. This will be the side of the final Prototype that connects to this port, and the side of the port that connects to the Prototype. It should be noted that beams and Ratiator signals to not pass through on there own in either direction, something must be connected. That is to say, for a Ratiator signal to go through, a Ratiator must be facing out of (reading) the output end. For beams to go through, the output side must be adjacent to something that can receive beams (such as an Arcane Reflector), as otherwise the beam will not go through. There can be a maximum of 6 ports, and only 1 port per side (additional ports are ignored). To create the Prototype after building a design (complete with ports) in the design area, go into the Prototyping Table interface, supply it with 3 copshowium ingots, and press the "Prototype" button. This will destroy the design (by default it copies it, and it is possible to clone a Prototype, but the configuration file has been changed) and create a Prototype block. The contents of Prototypes are chunkloaded while the Prototype block itself is. There are a finite number of Prototypes that can be created (500), after which the Prototyping Table will refuse to produce any more. Slots can freed up by placing an unwanted Prototype in the slot in the Prototyping Table with a recycling icon to destroy the Prototype, free up a slot, and return the copshowium ingots required to make it. Destroying the item in any way other than the recycle slot will NOT free up a slot. The slots are shared between all members of a server. There are certain blocks which are blacklisted from being part of a Prototype: other Prototype blocks (no nesting), Large Gears (a multiblock), Portals, and a few others. Things can be added to/removed from this list in the config (DO NOT allow nesting Prototypes or inserting Large Gears though). It is recommended that server owners/pack makers blacklist any multiblocks or ways of teleporting items/players/fluids into or out of the Prototype. 
info.prototyping.device=Using prototyping it is possible to compact large, complicated builds into a single block space for use in special Crossroads devices (by default they can be placed and used as parts of builds, but the configuration file has been changed). In order to produce a Prototype, you need a Prototyping Table. Place it down somewhere. It affects a 16x16x16 cube starting at its position plus 1 in each coordinate and ending at its position plus 16 in each coordinate (meaning the table in the lower corner of the cube). It is suggested that the entire area it affects be confined to 1 chunk for reasons that will become apparent with fields later on. A Prototype (the compacted design) can have 6 inputs/outputs (one per side of the block), and only certain things can go in/out of the Prototype (selected during construction). Ratiator signals, magic beams, heat, and rotary connections are the only things that can go in or out. Inside the design area (the 16x16x16 cube) you can build a system that will be copied into the finished Prototype. When building the design, assume there are solids walls, a ceiling, and a floor. Inputs and outputs are designated with Prototype Ports. The interface for a Prototype Port allows you to select what can travel through it, and whether it is an input or output. Rotary connections (connecting gears inside and outside the Prototype) and heat go in both directions, while Ratiator signals and beams can only go in OR out of 1 port. In refers to into the Prototype, out refers to outside the Prototype. In the port interface, select a side. This will be the side of the port that connects to the device containing the Prototype. It should be noted that beams and Ratiator signals to not pass through on there going into the Prototype, something must be connected. That is to say, for a Ratiator signal to go through, a Ratiator must be facing out of (reading) the output end. For beams to go through, the output side must be adjacent to something that can receive beams (such as an Arcane Reflector), as otherwise the beam will not go through. There can be a maximum of 6 ports, and only 1 port per side (additional ports are ignored). To create the Prototype after building a design (complete with ports) in the design area, go into the Prototyping Table interface, supply it with 3 copshowium ingots, and press the "Prototype" button. This will copy the design (at only the cost of the ingots) and create a Prototype block. The Prototype can be copied by placing it in the slot in the right side of the interface, along with the number of copshowium ingots required to produce it, and pressing the Prototype button to produce a duplicate. The contents of Prototypes are chunkloaded while in use. There are a finite number of Prototypes that can be created (500), after which the Prototyping Table will refuse to produce (or copy) any more. Slots can freed up by placing an unwanted Prototype in the slot in the Prototyping Table with a recycling icon to destroy the Prototype, free up a slot, and return the copshowium ingots required to make it. Destroying the item in any way other than the recycle slot will NOT free up a slot. The slots are shared between all members of a server. There are certain blocks which are blacklisted from being part of a Prototype: other Prototype blocks (no nesting), Large Gears (a multiblock), Portals, and a few others. Things can be added to/removed from this list in the config (DO NOT allow nesting Prototypes or inserting Large Gears though). It is recommended that server owners/pack makers blacklist any multiblocks or ways of teleporting items/players/fluids into or out of the Prototype. 
info.prototyping.pistol=There are a few devices which can have a Prototype socketed into them and are controlled by it. For those devices, a Prototype is inserted by crafting it with the device, and removed (and returned) by placing the device alone in the crafting grid. The devices which use a Prototype can be configured to accept magic from a Beam Cage. The devices will have specific requirements for the contained Prototype (but will still accept a Prototype that violates a requirement, but just disable the feature that uses that requirement). There should be a Magic Input port on the East side, and if there is than the drained magic from a Beam Cage will be inserted into that port every 5 ticks. There should be a Magic Output port on the West side, and magic sent into it will return to a held Beam Cage (unless otherwise specified). Other requirements vary based on the device. The contained Prototype will be chunkloaded while the device is held. The first such device is the Prototyped Pistol. It is a weapon that fires iron nuggets as bullets. It needs a Redstone Input port on the South side and a Rotary port on the Up side, which will connect to a single internal gear of I=10. When the pistol is not loaded, shift-right click with it to load an iron nugget from your inventory. While it is loaded, hold down right mouse for 15 ticks (3/4 of a second), after which it will be ABLE to fire. During those 15 ticks, and until it fires, any beam inserted into the West Magic Output port will be lost (design systems to optimize around this). It will fire the first tick after those 15 ticks have elapsed that the internal gear has a speed greater than 0. The projectile will move with a speed of √(2ω/(mass of the bullet)) blocks/second. The mass of the bullet is .035kg (note from the mod author: This is the real life formula for the speed IF by magic all the energy in the gear was transfered to the bullet, which is impossible. But then again, Technomancy is about bending the laws of physics to breaking point.) The bullet will do damage of (initial bullet speed)/20 points. As there is no upper limit on speed, depending on design quality a bullet might do no damage or 1-shot the enderdragon. The Prototyped Pistol has 1 other ability: If a beam was sent through the West Magic Output port within the 5 ticks before the bullet was fired (AKA beam was received what is considered simultaneously for the magic system) then the bullet will do the effect of the beam where it hits, whether it hits a block or an entity. As some beam effects can be quite deadly, this can be quite powerful. While right-mouse is held, the South Redstone In port will have a signal strength of 2, or if the player is sneaking, 1, when read by Ratiator.
info.fields.name=Temporal Fields
info.fields=Using Temporal Fields (or just fields for short) it is possible to manipulate the rate at which time flows for entities in a certain area, or even stop time in an area entirely. However, a single mistake could have disastrous consequences. In order to start using fields within a chunk, the chunk has to be unlocked using a Chunk Unlocker. Place it anywhere inside the chunk, and send a continuous beam of the TIME element into the top. The beam needs to be maintained for 8 seconds before the chunk is unlocked. The chunk will remain unlocked only while the Chunk Unlocker receives a TIME beam. Do not use multiple Chunk Unlockers in the same chunk, or they will interfere with each other. In order to work with fields, it is highly recommended to have Modular Goggles with an Emerald lens (to see Rate fields) and a Ruby lens (to see Flux fields). Each unlocked chunk is subdivided in 64 sections, in an 8x8 grid of 'Nodes', each of which is 2x(bedrock to sky height)x2 blocks. Each node has 2 values: Flux and Rate, which are both 8 by default, are always whole numbers, and can be no higher than 128. The rate at which time flows for entities in a node is (Rate)/8 speed, so the default Rate of 8 would give (8/8=1) times speed. The amount of Rate and Flux in a node can actually be seen by wearing the Goggles as mentioned earlier. Rate will be rendered in green, and Flux is rendered in red. Depending on the configuration settings, they will either appear are translucent lines connecting nodes or as translucent quadrilaterals with each corner being a node. The height of the lines/corners shows the amount of Flux/Rate, with feet level being 0 and waist height being 8 (2 blocks high is 16, etc.). Both Rate and Flux can be manipulated with machines, and are recalculated in a cycle every 5 ticks. There are important rules governing Rate and Flux: Rate returns to 8 unless controlled externally, with each influencing device pushing it up or down away from the resting point of 8. Remove all devices changing it and it will return to 8 next cycle. Flux does not return to 8 on its own, and if increased by 3 to 11 one cycle, and then next cycle 2 is added, it will go to 13 instead of 10. It also changes randomly when it isn't equal to 8: each cycle it changes by a random amount from 0 to ((current flux - 8)/8), with the upper bound rounded away from 0. If flux is less than 8, than each cycle it has a chance to decrease by 1. If it were, for example, 18 then every cycle it has a chance to increase from 1 to 2. At exactly 8, it doesn't change randomly. Every time the Rate in a node changes, flux in that node increases (even if rate decreased) by |ΔRate/2| (Δ means change in). If Flux reaches (or would exceed) 128, a flux disaster occurs in the chunk and the chunk will become locked again (so a Chunk Unlocker will need another 8 seconds to unlock it). There are several flux disasters, all of them extremely unpleasant and destructive (all of them can be disabled in the configuration file). They range from turning everything in the chunk to air, to a small explosion. It should be noted that every time a chunk is unlocked, the Rate and Flux in the contained nodes resets to 8. Normally, neither Flux nor Rate can reach 0, though under special conditions Rate can hit 0 (stopping time in the node). If the Rate in a node exceeds the Flux in the node, then Rate will go to 0 and what is effectively a death spiral will start, which can only be stopped by locking the chunk (by no longer inserting TIME into the Chunk Unlocker) before it is too late. During this death spiral (which is the only time that Rate = 0), Rate is locked at 0, Flux will no longer change randomly, Flux will no longer be directly increased or decreased by machines, and Flux will increase by 32 each cycle (eventually hitting 128). The speed at which Flux increases during a death spiral CAN be slowed. Define the Flux Force as amount machines would change Flux by if it were not a death spiral each cycle (so if normally the machine setup in a node would decrease Flux by 7 each cycle, Flux Force is -7, and increasing makes it a positive number). The actual speed that Flux increases during a death spiral is not 32 per cycle, but 32*(2^(Flux Force)), with a minimum increase of 1 per cycle. This means that will a downwards Flux Force of 5 or more, Flux will only increase during a death spiral by 1 each cycle. A positive Flux Force would speed up the increase, however. This all means that if you want to stop time, it can only be temporary, and you have to prevent a Flux Disaster while stopping time, the chunk has to be re-locked before it is too late. There are 3 machines involved in manipulating the Rate and Flux. First, the Rate Reader Axis: It acts identically to a Redstone Master Axis, except instead of setting a speed equal to the received signal strength, the speed equals (Flux)*π/16, or 0 if the chunk is locked. A machine called a Flux Manipulator can apply a Flux Force in the node it is in, based on the angle rotated by a gear attached to the top in the last 5 ticks (the duration of a cycle). The Flux Force it applies = θ*16/π, or 1 revolution applies a Flux Force of 32. The direction rotated controls whether the Flux Force is + or -. Finally, the Rate Manipulator applies a Rate Force (like a Flux Force, but for Rate, and of course it only lasts as long as it is applied) based on the SPEED of a gear attached to the top (not the angle rotated). Rate Force=ω*16. Fields do not interact through Prototypes (field setups inside Prototypes do not affect the outside world, and vice-versa). If Flux hits 128 inside of a Workspace Dimension or Prototype, there is no Flux Disaster (though the chunk still gets re-locked). It is therefore recommended to test field setups in a Workspace Dimension. A few tips for making a fields setup: As Flux always needs to be >= Rate (unless the goal is to stop time), even though increasing Rate also increases Flux, it is only by 1/2 the ΔRate so the Flux should be increased beforehand. Also, as Flux changes randomly when not equal to 8, some sort of system to measure Flux and account for the random change should be built. 
info.watch.name=Prototyped Watch
info.watch=The Prototyped Watch is a multi-function item which, like the Prototyped Pistol, requires a socketed Prototype to function. In addition to the standard Magic ports, it should also have a Redstone In port on the South side, and optionally a Rotary port on the Up side. Unlike all other things involving Prototypes, fields generated within the Watch's socketed Prototype will affect entities in the outside world while the Watch is held. The Watch's Prototype is confined to 1 chunk on the inside, so field setups inside should take that into account. If there is a field inside the Watch and a field outsid the Watch affecting the same entity, the two speed multipliers are multiplied. Neither of the fields themselves are effected. The nodes within the Watch do not directly correspond to those outside, which is to say that the North-Eastern most node inside the Watch does not necessarily impact what would the be North-Eastern most node of the chunk the player is standing in. Instead, the Watch effects time around it as if the player was standing in the center of the Watch's node which is 4th from the North-West. (For example: an entity 4 blocks south of the player is 2 nodes to the South, so they are affected by the node inside the Watch which is 6th from the North and 4th from the West). While holding the Watch and the right-mouse button is held, the South Redstone In port will have a signal strength of 2, or if the player is sneaking, 1, when read by Ratiator. The Rotary Up port allows control of the needle on the Watch's item icon. The needle will point in the same angle as the internal gear (the needle can only point in 8 directions, so it shows the closest one). This can be used to do everything from show a countdown to making the display for a basic calculator. 
